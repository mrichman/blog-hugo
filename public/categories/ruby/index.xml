<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Mark Richman Consulting</title>
    <link>http://www.markrichman.com:1313/categories/ruby/</link>
    <description>Recent content in Ruby on Mark Richman Consulting</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 Oct 2015 00:36:19 +0000</lastBuildDate>
    <atom:link href="http://www.markrichman.com:1313/categories/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Programming Language Choice Doesn’t Matter</title>
      <link>http://www.markrichman.com:1313/programming-language-choice-doesnt-matter/</link>
      <pubDate>Mon, 26 Oct 2015 00:36:19 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/programming-language-choice-doesnt-matter/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;alignnone wp-image-792&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2015/10/prog-languages.png&#34; alt=&#34;prog-languages&#34; width=&#34;437&#34; height=&#34;182&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2015/10/prog-languages-300x125.png 300w, http://www.markrichman.com/wp-content/uploads/2015/10/prog-languages.png 620w&#34; sizes=&#34;(max-width: 437px) 100vw, 437px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Microsoft sucks. Java is dead. Rails can&amp;#8217;t scale. Python is slow. I&amp;#8217;ve heard it all, and I can tell you &lt;strong&gt;none of it matters.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Developers are an interesting breed; they tend to stick to what they know best, but also love to tinker with new technologies. These experiments often fail at the expense of a project&amp;#8217;s success, however.&lt;/p&gt;

&lt;p&gt;Many of my clients struggle with technology choice for new projects. Business owners and executives are hesitant to try newer technologies, but by the same token don&amp;#8217;t want to be left driving an Edsel. &lt;em&gt;If you&amp;#8217;re younger than 40, you probably didn&amp;#8217;t get that.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So why do I say these choices don&amp;#8217;t matter? When it comes to programming languages/platforms, what matters most to my clients is &lt;strong&gt;speed&lt;/strong&gt;. Time to market is everything. That said, here are some &amp;#8220;guard rails&amp;#8221; to help guide your thinking:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use What You Know&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;re a business owner or executive with technology experience, you probably have a bias when it comes to specific technologies. If you&amp;#8217;re a .NET gal, for example, you&amp;#8217;ll probably pick that because you&amp;#8217;ll more easily understand what&amp;#8217;s delivered. If you have a development team, ask them what they want to use. You may find that your team of PHP geeks absolutely hates using that, and would love to switch to Ruby, Node.js, or some better tool for the job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use What You Can Hire&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You may have a preference for a particular technology, but the local job market is devoid of candidates. I live in South Florida, and it&amp;#8217;s been almost entirely Microsoftland for 15 years. That&amp;#8217;s changing, but my local clients tend to stick with Microsoft technologies just because of the availability of local talent. Some of my other clients are comfortable with remote workers, so the talent pool for other technologies is far larger.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use What You Can Learn Quickly&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve worked with many companies that were steadfast Microsoft shops for years. Newer technologies, changes in leadership, or other factors sometimes inspire a look at something new. Given the choice between _Shiny New Object &lt;strong&gt;A&lt;/strong&gt; or &lt;strong&gt;B&lt;/strong&gt;, _if all things are equal, choose the one you can learn quickly. Remember &amp;#8211; time to market.&lt;/p&gt;

&lt;p&gt;When choosing a new technology, don&amp;#8217;t get stuck in analysis paralysis.&lt;/p&gt;

&lt;p&gt;© 2015 Mark Richman. All rights reserved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails Custom Authentication using Devise, DataMapper, and a Legacy Database</title>
      <link>http://www.markrichman.com:1313/rails-devise-datamapper-authentication/</link>
      <pubDate>Mon, 22 Nov 2010 16:03:24 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/rails-devise-datamapper-authentication/</guid>
      <description>&lt;p&gt;ActiveRecord is great if your database schema evolves along with your web app from birth, but not all of us have this luxury. Many of us live in the world of corporate IT – a world of legacy databases and bureaucracies that make getting a Rails app into production hard enough, let alone getting a new schema into production. &lt;a href=&#34;http://datamapper.org/&#34;&gt;DataMapper&lt;/a&gt; is a common alternative ORM to use for these scenarios. DataMapper is ideally suited for legacy databases, as &lt;a href=&#34;http://sick.snusnu.info/&#34;&gt;Martin Gamsjaeger&lt;/a&gt; describes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DataMapper allows you to map meaningful model and property names to cryptic legacy table and column naming conventions. It allows you to do so either on a per model/property, or an app wide basis.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DataMapper supports lazy properties that will only be fetched when actually accessed.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DataMapper has seamless support for composite primary keys.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DataMapper only cares about the properties (columns) you explicitly declare in your models. Other columns will never be touched or read.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DataMapper works nicely with foreign key constraints in your database and with the help of dm-constraints it also supports creating them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There&amp;#8217;s some relevant documentation on &lt;a href=&#34;http://datamapper.org/docs/legacy&#34;&gt;http://datamapper.org/docs/legacy&lt;/a&gt; too.&lt;/p&gt;

&lt;p&gt;I’m not going into depths with DM in this article; there are plenty of tutorials out there. What I am going to demonstrate is how to live with a legacy database written for an app with a horribly insecure authentication mechanism, based on a schema whose table and column names don’t match their Rails Model counterparts.&lt;/p&gt;

&lt;p&gt;Here’s our User model:&lt;/p&gt;

&lt;pre&gt;class User
  include DataMapper::Resource
  include DataMapper::MassAssignmentSecurity

  devise :database_authenticatable, :authentication_keys =&amp;gt; [:username]
  storage_names[:default] = &#39;legacy_User_table&#39;

  property :id,                 Serial,  :field =&amp;gt; &#39;UserId&#39;,           :required =&amp;gt; true
  property :username,           String,  :field =&amp;gt; &#39;LoginId&#39;,          :required =&amp;gt; true
  property :encrypted_password, String,  :field =&amp;gt; &#39;PasswordSHA1Hash&#39;, :required =&amp;gt; true
  property :enabled,            Integer, :field =&amp;gt; &#39;Enabled&#39;,          :required =&amp;gt; true
  property :is_admin,           Integer, :field =&amp;gt; &#39;IsSuperAdmin&#39;,     :required =&amp;gt; true
  property :first_name,         String,  :field =&amp;gt; &#39;Name&#39;,             :required =&amp;gt; true
  property :last_name,          String,  :field =&amp;gt; &#39;Surname&#39;,          :required =&amp;gt; true

  attr_accessible :username, :password, :password_confirmation

  def password_salt=(password_salt)
  end

  def password_salt
  end

  def password_digest(password)
    self.class.encryptor_class.digest(password)
  end

end
&lt;/pre&gt;

&lt;p&gt;You’ll notice this model overrides :authentication_keys, using :username instead of :email. I also map the table name to ‘legacy_Users_table’ since we don’t have a conveniently named ‘users’ table in our schema. Our password in this monstrosity is stored as an unsalted SHA1 hash, which then gets Base64-encoded. Really secure, huh?&lt;/p&gt;

&lt;p&gt;For Devise to work with unsalted passwords, I’ve had to override the password_salt functions and the password digest function that Devise looks for. Here, this lives in a custom Devise encryptor class, which I define in an initializer called devise_encryptor.rb:&lt;/p&gt;

&lt;pre&gt;module Devise
  module Encryptors
    class Sha1base64 &amp;lt; Base

      def self.digest(password)
        sha1 = Digest::SHA1.digest(password)
        Base64.strict_encode64(sha1)
      end

      def self.salt(username)
        nil
      end

    end
  end
end
&lt;/pre&gt;

&lt;p&gt;This encryptor takes the password, short-circuits the salt function, and returns the Base64-encoded SHA1 hash. There are a couple of configuration changes needed to wire this up. In /initializers/devise.rb, set:&lt;/p&gt;

&lt;pre&gt;config.encryptor = :sha1base64
&lt;/pre&gt;

&lt;p&gt;This will reference the above custom encryptor class name.&lt;/p&gt;

&lt;p&gt;There is one last workaround we have to apply to get the password_salt override in our user model to work. From the &lt;a href=&#34;https://github.com/plataformatec/devise/blob/master/lib/devise.rb&#34;&gt;Devise source code&lt;/a&gt;: we have to tell Devise &lt;strong&gt;not&lt;/strong&gt; to apply the schema in ORMs where the Devise declaration and schema belongs to the same class (as Datamapper and Mongoid). This goes inside devise.rb, in the Devise.config block, and is courtesy of Jared Morgan in the DataMapper mailing list:&lt;/p&gt;

&lt;pre&gt;config.apply_schema = false
&lt;/pre&gt;

&lt;p&gt;The last change you’ll make is in the devise sign_in view, which you likely generated using rails g devise:views. Use the :username instead of :email for your login credentials:&lt;/p&gt;

&lt;pre&gt;&amp;lt;%= f.label :username %&amp;gt; &amp;lt;%= f.text_field :username %&amp;gt;&lt;/pre&gt;

&lt;p&gt;If all goes well, you’ll now be able to log into your shiny new Rails app, backended by a steaming pile of crap designed and maintained by monkeys.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails Integration Test with shoulda, factory_girl, webrat, and authlogic</title>
      <link>http://www.markrichman.com:1313/rails-integration-test-with-shoulda-factory_girl-webrat-and-authlogic/</link>
      <pubDate>Thu, 25 Feb 2010 20:22:11 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/rails-integration-test-with-shoulda-factory_girl-webrat-and-authlogic/</guid>
      <description>&lt;p&gt;I had some issues trying to use a symbol&lt;/p&gt;

&lt;pre&gt;session[:user_credentials_id]&lt;/pre&gt;

&lt;p&gt;vs. a string&lt;/p&gt;

&lt;pre&gt;session[&#34;user_credentials_id&#34;]&lt;/pre&gt;

&lt;p&gt;Here is my solution:&lt;/p&gt;

&lt;pre&gt;require &#39;test_helper&#39;

class LoginTest &amp;lt; ActionController::IntegrationTest
  context &#39;A user&#39; do
    setup do
      @user = Factory(:user)
      # puts @user.inspect    
    end

    should &#39;be able to login with a valid username and password&#39; do
      visit &#39;/user_session/new&#39;
      assert_equal &#39;/user_session/new&#39;, path
      fill_in &#39;Login&#39;, :with =&gt; @user.login
      fill_in &#39;Password&#39;, :with =&gt; @user.password
      click_button &#39;Login&#39;
      # puts &#34;user.id: #{@user.id}&#34; 
      # puts &#34;session: #{session.inspect}&#34;
      # puts &#34;session[:user_credentials_id] #{session[&#34;user_credentials_id&#34;]}&#34;
      assert_equal @user.id, session[&#34;user_credentials_id&#34;]
    end

    should &#39;be denied access with an invalid username or password&#39; do
      visit &#39;/user_session/new&#39;
      assert_equal &#39;/user_session/new&#39;, path
      fill_in &#39;Login&#39;, :with =&gt; @user.login
      fill_in &#39;Password&#39;, :with =&gt; &#39;wrongpassord&#39;
      click_button &#39;Login&#39;
      assert_nil session[&#34;user_credentials_id&#34;]
    end

  end
end
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Tools of the Trade</title>
      <link>http://www.markrichman.com:1313/tools-of-the-trade/</link>
      <pubDate>Wed, 14 Oct 2009 13:10:15 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/tools-of-the-trade/</guid>
      <description>&lt;p&gt;Many of my &lt;a href=&#34;http://afreshcup.com/2009/10/14/double-shot-561/&#34; target=&#34;_blank&#34;&gt;colleagues&lt;/a&gt; in the &lt;a title=&#34;Ruby on Rails&#34; href=&#34;http://www.rubyonrails.org&#34; target=&#34;_blank&#34;&gt;Ruby on Rails&lt;/a&gt; community have been posting a “tools of the trade” blog post, covering their hardware and software preferences. Now that I am nearly Microsoft-free, I figured I&amp;#8217;d update my list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hardware&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.apple.com/macpro/&#34; target=&#34;_blank&#34;&gt;Apple Mac Pro&lt;/a&gt; 8-core Xeon, 10GB RAM, 320GB + 500GB 7200rpm SATA drives. This is my main box and the best computer I&amp;#8217;ve ever owned. I use the 500GB drive as my Time Machine backup drive, but I am looking into other backup options as Time Machine is slow and there are anecdotal reliability issues, but now that I&amp;#8217;m running Snow Leopard, I haven&amp;#8217;t experienced any (not that I&amp;#8217;ve attempted a restore yet either). I&amp;#8217;m going to look into SuperDuper!&lt;/li&gt;
&lt;li&gt;Dual Dell FP1905 19&amp;#8243; LCD monitors. I hate them. The colors don&amp;#8217;t match, no matter how I calibrate them, and they are too small for the type of work I do now. They also suffer from burn-in and ghosting. I&amp;#8217;m considering a new &lt;a href=&#34;http://accessories.us.dell.com/sna/products/Monitors/productdetail.aspx?c=us&amp;l=en&amp;s=dhs&amp;cs=19&amp;sku=223-4890&#34; target=&#34;_blank&#34;&gt;Dell UltraSharp 3008WFP 30-inch&lt;/a&gt;, unless Apple announces something better for less money (ain&amp;#8217;t gonna happen).&lt;/li&gt;
&lt;li&gt;External WD USB/FireWire hard drive for additional backups.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.m-audio.com/products/en_us/FastTrackPro.html&#34; target=&#34;_blank&#34;&gt;M-Audio Fast Track Pro&lt;/a&gt; audio interface. I play guitar, and use this to record via the Shure SM-57 mic in front of my amps (not that this has anything to do with my work, but it&amp;#8217;s cool nonetheless). My music gear is the subject for another blog entry.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.apple.com/iphone/&#34; target=&#34;_blank&#34;&gt;Apple iPhone 3G&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.apple.com/macosx/&#34; target=&#34;_blank&#34;&gt;Mac OS X 10.6 Snow Leopard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.apple.com/macosx/refinements/enhancements-refinements.html#mail&#34; target=&#34;_blank&#34;&gt;Mail.app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Apple_Terminal&#34; target=&#34;_blank&#34;&gt;Terminal.app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vienna-rss.org/&#34; target=&#34;_blank&#34;&gt;Vienna&lt;/a&gt; RSS Reader&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mozilla.com/en-US/firefox/personal.html&#34; target=&#34;_blank&#34;&gt;Firefox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://macromates.com/&#34; target=&#34;_blank&#34;&gt;TextMate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://culturedcode.com/things/&#34; target=&#34;_blank&#34;&gt;Things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vmware.com/products/fusion/&#34; target=&#34;_blank&#34;&gt;VMware Fusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.openoffice.org&#34; target=&#34;_blank&#34;&gt;OpenOffice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://adium.im/&#34; target=&#34;_blank&#34;&gt;Adium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://colloquy.info/&#34; target=&#34;_blank&#34;&gt;Colloquy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.apple.com/itunes/&#34; target=&#34;_blank&#34;&gt;iTunes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tweetdeck.com&#34; target=&#34;_blank&#34;&gt;TweetDeck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.skype.com&#34; target=&#34;_blank&#34;&gt;Skype&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ksuther.com/chax/&#34; target=&#34;_blank&#34;&gt;Chax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.postgresql.org&#34; target=&#34;_blank&#34;&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rubyonrails.org/&#34; target=&#34;_blank&#34;&gt;Ruby on Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sqlpower.ca/page/architect&#34; target=&#34;_blank&#34;&gt;Power*Architect&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Hosting&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.linode.com&#34; target=&#34;_blank&#34;&gt;Linode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.godaddy.com&#34; target=&#34;_blank&#34;&gt;GoDaddy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How to install pg (postgresql) gem on Snow Leopard, 64 bit</title>
      <link>http://www.markrichman.com:1313/how-to-install-pg-postgresql-gem-on-snow-leopard-64-bit/</link>
      <pubDate>Sun, 04 Oct 2009 02:12:51 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/how-to-install-pg-postgresql-gem-on-snow-leopard-64-bit/</guid>
      <description>&lt;p&gt;This one was a toughy. I installed PostgreSQL 8.4 from source in /usr/local/pgsql. Install the gem as follows:&lt;/p&gt;

&lt;p&gt;`This one was a toughy. I installed PostgreSQL 8.4 from source in /usr/local/pgsql. Install the gem as follows:&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>