<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Agile on Mark Richman Consulting</title>
    <link>http://www.markrichman.com:1313/categories/agile/</link>
    <description>Recent content in Agile on Mark Richman Consulting</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Feb 2016 19:08:54 +0000</lastBuildDate>
    <atom:link href="http://www.markrichman.com:1313/categories/agile/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>If the Customer Ain’t Happy, Ain’t Nobody Happy</title>
      <link>http://www.markrichman.com:1313/if-the-customer-aint-happy-aint-nobody-happy/</link>
      <pubDate>Fri, 19 Feb 2016 19:08:54 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/if-the-customer-aint-happy-aint-nobody-happy/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;size-medium wp-image-949 alignleft&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2016/02/Know_customers_1024x544_B-300x159.jpg&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;159&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2016/02/Know_customers_1024x544_B-300x159.jpg 300w, http://www.markrichman.com/wp-content/uploads/2016/02/Know_customers_1024x544_B-768x408.jpg 768w, http://www.markrichman.com/wp-content/uploads/2016/02/Know_customers_1024x544_B.jpg 1024w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;This is a short story about two software development companies. Let&amp;#8217;s call them Alpha and Bravo. Both companies received an RFP (Request for Proposal) to develop custom help desk software. After careful review of the respective proposals, the client selects Alpha for the project. Six months to the day after signing the contract, Alpha delivers exactly what was proposed. However, the client is very unhappy.&lt;/p&gt;

&lt;p&gt;During the course of development, the client discovered additional features which Alpha failed to include in the final product. The client renegotiates their contract with Alpha, and four months later, Alpha delivers a product that satisfies all the requirements. But the client is still unhappy. Why? Because during the ten total months of development, a new version of the user interface standards were published. Back to the drawing board. Again. You see where this is going, right?&lt;/p&gt;

&lt;p&gt;Now let&amp;#8217;s suppose Bravo won the contract instead of Alpha. Because Bravo doesn&amp;#8217;t believe in deadlines, they convince the client to accept six incremental deliveries of the product, instead of a single release at the end. One month after commencement, Bravo delivers a minimal but functional, tested, and documented version of the system. The client, after using this early version, notes some usability changes they would like made. They were only able to identify these changes after working with the software. Bravo incorporates the client&amp;#8217;s feedback and a month later delivers another iteration to the client. The client is very happy to see rapid progress, and mentions the upcoming changes to user interface standards. Bravo updates the following iteration to adhere to these standards, and delivers a working system in five months, not six. The customer is delighted.&lt;/p&gt;

&lt;p&gt;Alpha delivered a new product for their client after six months. Bravo delivered the same product incrementally over five months. Did the customer have to work a little harder with Bravo? Sure. Did they get everything they wanted with Alpha? No way.&lt;/p&gt;

&lt;p&gt;All software projects must contribute to the customer&amp;#8217;s business case to the maximum extent possible. Throughout a project, the team must always build the most important features first, as defined by the customer. This approach requires significant customer involvement, continuing for the duration of the project, allowing the early and continuous delivery of value to the customer.&lt;/p&gt;

&lt;p&gt;© 2016 by Mark Richman. All rights reserved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Ship Software 7X More Often</title>
      <link>http://www.markrichman.com:1313/how-to-ship-software-7x-more-often/</link>
      <pubDate>Mon, 11 Jan 2016 23:36:58 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/how-to-ship-software-7x-more-often/</guid>
      <description>

&lt;p&gt;My clients, just like you, want to enable faster, better delivery of value. I&amp;#8217;ve helped these organizations scale and improve their operations through agile delivery, achieving continuous innovation of their products. I write and speak a lot about the people, processes, tools, and technologies required for success with agile. While people and processes are critical for success, I want to switch gears a bit talk about tools and technologies.&lt;/p&gt;

&lt;p&gt;The pace of application innovation is faster than ever before, requiring Continuous Integration (CI) and Continuous Deployment (CD). Container technologies, such as &lt;strong&gt;Docker&lt;/strong&gt;, deliver a robust mechanism to develop and deploy applications faster, cheaper, and with higher quality than ever before.&lt;/p&gt;

&lt;h3 id=&#34;what-is-it&#34;&gt;What is it?&lt;/h3&gt;

&lt;p&gt;In contrast to virtual machines, containers offer minimal overhead and resource usage. Developers, testers, and system administrators can quickly run an entire production stack locally, without having to configure and maintain multiple VMs. But that&amp;#8217;s just one use case.&lt;/p&gt;

&lt;p&gt;Here are some benefits my clients enjoy by using Docker:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simplified configuration&lt;/li&gt;
&lt;li&gt;More efficient management of CI and CD pipelines&lt;/li&gt;
&lt;li&gt;Improved developer and tester productivity&lt;/li&gt;
&lt;li&gt;Application isolation&lt;/li&gt;
&lt;li&gt;Server consolidation&lt;/li&gt;
&lt;li&gt;Faster development and debugging&lt;/li&gt;
&lt;li&gt;Multitenancy without virtual machines&lt;/li&gt;
&lt;li&gt;Rapid deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On average, companies that use Docker &lt;strong&gt;ship software 7x more often&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;how-does-it-all-work&#34;&gt;How does it all work?&lt;/h3&gt;

&lt;p&gt;Each container instance includes the application, and a minimum set of OS components needed to run, thereby enabling lightweight, composable, and portable applications. In effect, containers unlock a write-once, run anywhere approach. Developers can target application deployment to any location, without having to rewrite or reconfigure code, thereby maximizing productivity.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;size-medium wp-image-932 align left alignleft&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2016/01/what-is-docker-diagram-273x300.png&#34; alt=&#34;what-is-docker-diagram&#34; width=&#34;273&#34; height=&#34;300&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2016/01/what-is-docker-diagram-273x300.png 273w, http://www.markrichman.com/wp-content/uploads/2016/01/what-is-docker-diagram.png 638w&#34; sizes=&#34;(max-width: 273px) 100vw, 273px&#34; /&gt;&lt;/p&gt;

&lt;div&gt;
  We achieve this level of performance through a deliberate architecture shift to microservices. These are small, independent application components, built around business capabilities and independently deployable by fully automated deployment machinery.
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;One efficiency killer I see time and again is an inflexible, monolithic application architecture. These are applications that have grown over time, improperly curated, that are difficult to maintain and keep pace with innovation. Making the shift to microservices makes not only simplifies maintenance, but allows an easy path to containerization.&lt;/p&gt;

&lt;p&gt;Docker helps maximize developer productivity by eliminating dependencies across application services. Applications, once decomposed into microservices, can be deployed to different containers. These containers operate in isolation, so dependencies on conflicting versions are eliminated. The microservices can be independently upgraded, allowing for rapid innovation.&lt;/p&gt;

&lt;h3 id=&#34;how-i-can-help-you&#34;&gt;How I can help you&lt;/h3&gt;

&lt;p&gt;My mission is to help your company achieve maximum performance through agile development and cloud computing. Whether it&amp;#8217;s a culture shift, readying your people and processes for agile, or implementing the tools and technologies to realize DevOps success, we can find opportunities for improvement.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;© 2016 by Mark Richman. All Rights Reserved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3 Ways to Build an Agile Organization</title>
      <link>http://www.markrichman.com:1313/3-ways-to-build-an-agile-organization/</link>
      <pubDate>Tue, 29 Dec 2015 12:55:10 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/3-ways-to-build-an-agile-organization/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;size-medium wp-image-919 alignleft&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2015/12/orgift-featured-300x138.jpg&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;138&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2015/12/orgift-featured-300x138.jpg 300w, http://www.markrichman.com/wp-content/uploads/2015/12/orgift-featured.jpg 630w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;For the last few years, especially in the software development space, we&amp;#8217;ve been hearing the word &amp;#8220;agile&amp;#8221; thrown around ad nauseam. Concepts such as iterative design, adaptive planning, collaboration, self-organization, continuous delivery, and so on flood the current literature.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve spent the last several years working with clients to develop and improve their agile practices, improving quality and time-to-market. The result has been great for software teams and customers alike. But aren&amp;#8217;t we leaving the rest of the organization out in the cold? How can we apply these practices beyond software development, improving the business from the top down?&lt;/p&gt;

&lt;p&gt;This is the &lt;em&gt;Agile Organization&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Small companies, like the startups with whom I&amp;#8217;ve been involved, embrace agility as their default. Larger, more established companies, tend to move less nimbly as they grow, exposing themselves to disruption by more agile players. Let&amp;#8217;s look at a few strategies to help us achieve agility.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speeding Adoption&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many of my clients have been struggling to implement agile practices throughout their organization, often taking a couple of years to apply it to every program and project. This kind of _variable adoption_ often indicates a lack of commitment to change. With parts of the organization operating at different cadences, tremendous friction develops, stalling progress. I&amp;#8217;ve worked with diehards, skeptics, and even saboteurs to make agile a reality. Speeding up the agile adoption process in the face of naysayers requires a leap of faith, but one that is supported by years of supporting evidence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Everyone is a Leader&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the secret weapons of Agile&amp;#8217;s success is the role of the individual contributor. Innovators, specialists, and organizers all have equal influence. There is no place for a hands-off manager sitting behind a desk in an agile organization. In some of the best performing organizations with whom I&amp;#8217;ve worked, the teams often assign deliverables to executives, and not the other way around. Steve Jobs once said, &amp;#8220;&lt;span style=&#34;line-height: 1.5;&#34;&gt;it doesn’t make sense to hire smart people and tell them what to do; we hire smart people so they can tell us what to do.&amp;#8221; The agile organization is a collective; trust in each of your people to take a leadership role.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Decide Fast, Fail Faster&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Agile organizations make decisions quickly. This is not to be confused with unmitigated risk-taking. I&amp;#8217;ve seen companies grind to a halt under the strain of &lt;em&gt;analysis paralysis&lt;/em&gt;, forestalling critical decisions due to perceived risk. Longer development cycles increase this risk substantially. I work with my clients to shorten these cycle times. With smaller, more frequent deliveries to market, we can inspect, analyze, and adapt to change. If we fail, by whatever metric we choose, we can take advantage of the learning to improve our decision making and recover quickly. This is the iterative nature of agile, and therein lies its effectiveness.&lt;/p&gt;

&lt;p&gt;Challenge Questions for Business Leaders:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Do you have a stalled agile adoption in your organization, or varying rates of adoption?&lt;/li&gt;
&lt;li&gt;Have you empowered everyone at all levels to be a decision maker?&lt;/li&gt;
&lt;li&gt;Are you missing market opportunities due to stalled decisions or slow production cycles?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;© 2015 by Mark Richman. All rights reserved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gunfighting and IT Service Delivery</title>
      <link>http://www.markrichman.com:1313/gunfighting-and-it-service-delivery/</link>
      <pubDate>Mon, 14 Dec 2015 16:41:48 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/gunfighting-and-it-service-delivery/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;size-medium wp-image-893 alignleft&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2015/12/eastwood-300x165.png&#34; alt=&#34;eastwood&#34; width=&#34;300&#34; height=&#34;165&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2015/12/eastwood-300x165.png 300w, http://www.markrichman.com/wp-content/uploads/2015/12/eastwood-768x421.png 768w, http://www.markrichman.com/wp-content/uploads/2015/12/eastwood-1024x562.png 1024w, http://www.markrichman.com/wp-content/uploads/2015/12/eastwood.png 1485w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;I&amp;#8217;ve been a sport shooting enthusiast for about 15 years. In that time, I&amp;#8217;ve found the most difficult skill to master is &lt;strong&gt;speed vs. accuracy&lt;/strong&gt;. In a fight for one&amp;#8217;s life, this skill becomes vital &amp;#8211; hitting the right target before you exhaust your ammunition. This same balance applies to IT service delivery.&lt;/p&gt;

&lt;p&gt;In my consulting work, I&amp;#8217;ve observed clients who have only one speed. Some clients can only deliver quickly, others slowly. Both extremes are dangerous. Whichever speed it is, it will only be optimal for a narrow range of projects. Learning to adapt and adjust speed is critical for success &amp;#8211; that is, hitting the right target at the right speed.&lt;/p&gt;

&lt;p&gt;How do we know how fast to go?&lt;/p&gt;

&lt;p&gt;Back to my gunfighting analogy &amp;#8211; as the distance to your target increases, so do your chances of missing. Counterintuitively, sometimes you have to speed up to gain accuracy, closing the distance to your target.&lt;/p&gt;

&lt;p&gt;What does this have to do with IT service delivery?&lt;/p&gt;

&lt;p&gt;Glad you asked. I&amp;#8217;ve had clients work at both speed extremes. Too quickly, and requirements are missed, bugs abound, and expensive rework is incurred. As a result, important features get dropped to make a delivery date, or worse, dates are missed. Too slowly, and (obviously) dates are missed, but more importantly, competitors can leapfrog you.&lt;/p&gt;

&lt;p&gt;But you just said to speed up to gain accuracy. Mark, you&amp;#8217;re pulling my leg!&lt;/p&gt;

&lt;p&gt;Nope. I promise. What I mean by &amp;#8220;speed&amp;#8221; here is not necessarily how quickly you can deliver, but how &lt;strong&gt;frequently&lt;/strong&gt; you can deliver.&lt;/p&gt;

&lt;p&gt;Frequency, by way of iteration, allows us to deliver just the right solution at the right time, and no more. Delivering with shorter iterations reduces the distance to our target, and allows us to quickly adapt based on customer demand, market forces, or to take advantage of new technologies. Iterating also allows us to minimize the amount of waste produced by rework.&lt;/p&gt;

&lt;p&gt;Mark, how fast can I go?&lt;/p&gt;

&lt;p&gt;I don&amp;#8217;t know. You don&amp;#8217;t know. But we can find out. After adopting some agile practices, we can measure our velocity &amp;#8211; the amount of value we can deliver per iteration.&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;re anything like my clients, you&amp;#8217;ll be surprised to learn how much faster and straighter you can shoot.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Five Must-Answer Tech Strategy Questions</title>
      <link>http://www.markrichman.com:1313/five-must-answer-tech-strategy-questions/</link>
      <pubDate>Mon, 07 Dec 2015 20:31:48 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/five-must-answer-tech-strategy-questions/</guid>
      <description>&lt;p&gt;​Many of my senior-executive clients have been called upon by their boards to get directly involved in technology issues. These boards are also starting to think strategically about technology, and how industry trends are shaping their companies&amp;#8217; future. More than ever, we need to ask questions that keep us focused on the right issues. While working with clients on new projects, or meeting prospective clients for the first time, I&amp;#8217;ve collected a series of &amp;#8220;must-answer&amp;#8221; questions that bring clarity to any technology strategy initiative.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How often does your board discuss technology topics?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many of my clients lament that technology-specific topics are raised, on average, only twice a year at the board level. This level of strategic attention to technology isn&amp;#8217;t just insufficient, it&amp;#8217;s negligent. Boards as well as executive teams must consider the competitive landscape, keeping their eye on not only well-known competitors, but more importantly, from emerging competitors with distruptive technologies. I encourage frequent (at least quarterly) discussions to help keep the focus on competitveness, lest my clients face decimation by a more nible innovator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What technology-related issues are addressed by your leadership?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sadly, most executive teams relegate their technology discussions to the usual Keeping the Lights On (KTLO) issues. These are tasks such as application maintenance, change requests, standard updates, and general systems maintenance. This is at least a $1 Trillion travesty and upwards of 80% of my clients&amp;#8217; IT budgets are spent on KTLO. I help my clients elevate the importance of technology in their organizations from that of a commoditized utility to a strategic value-center. Thinking about that big data or cloud deployment, but you&amp;#8217;ve got KTLO issues? Don&amp;#8217;t do it without talking to me first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you have a technologist on your board? How does their presence affect the focus on technology issues?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you don&amp;#8217;t, you&amp;#8217;re endangering your business. Meaningful technology discussions at the board level are impossible without a technology-literate membership. I&amp;#8217;m not suggesting your CIO or CTO become board members, but I do advocate technology literacy at the board level. I&amp;#8217;ve worked with clients to develop &amp;#8220;tech strategy boot camps&amp;#8221; to achieve literacy in common issues such as data security, agile product management, big data, cloud, and other topics that board members of technology organizations should be conversant in. While this doesn&amp;#8217;t automatically turn novices into experts, it does offer an opportunity to become familiar with core issues affecting business strategy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What experience do our customers expect, and how can we better delight them?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I work with a number of e-commerce clients. They all face constant pressure from the likes of Apple, Amazon, and others to provide an insanely convenient and personal experience. Competing with these retail juggernauts, expecting to beat them at their own game is quixotic. Instead, we create disruptive programs to delight customers through innovative approaches to convenience and service. More traditional companies, such as banks, are deepening their investments in big data and analytics technologies that leverage social, location, and other data to attract and retain customers, both online and in brick and mortar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How agile is our business? Can we deliver high-value impact at low cost and risk?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I often describe two dimensions of business agility: strategic and operational. Strategic agility could be, for example, the speed with with a third-party technology can be integrated into an existing system. Business agility would be a measure such as time to market. These two dimensions produce a measure I call &lt;strong&gt;Agile Leverage&lt;/strong&gt;. This is the degree to which an organization can quickly deliver high-value solutions:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-medium wp-image-873&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2015/12/agility-300x292.png&#34; alt=&#34;agility&#34; width=&#34;300&#34; height=&#34;292&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2015/12/agility-52x50.png 52w, http://www.markrichman.com/wp-content/uploads/2015/12/agility-300x292.png 300w, http://www.markrichman.com/wp-content/uploads/2015/12/agility.png 333w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can maximize our Agile Leverage via the technology function in several ways. We can reduce the number of systems (I call this &amp;#8220;&lt;em&gt;minimizing the boxes and arrows&lt;/em&gt;&amp;#8220;), improving data quality through standards, adopting agile product/project management methodologies, or enabling resource scaling via the cloud.&lt;/p&gt;

&lt;p&gt;I help my clients drive both strategic and operational business agility in order to respond quickly and competitively.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;© 2015 Mark Richman. All rights reserved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Speed and the High Cost of Rework</title>
      <link>http://www.markrichman.com:1313/speed-and-the-high-cost-of-rework/</link>
      <pubDate>Tue, 01 Dec 2015 03:18:54 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/speed-and-the-high-cost-of-rework/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;size-medium wp-image-864 alignleft&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2015/11/Cost-down-300x200.jpg&#34; alt=&#34;increased quality - speed - efficiency&#34; width=&#34;300&#34; height=&#34;200&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2015/11/Cost-down-300x200.jpg 300w, http://www.markrichman.com/wp-content/uploads/2015/11/Cost-down.jpg 424w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;One of my best clients initially contacted me because they simply wanted to get faster at what they do. They needed to deliver more value to their customers more often, and at lower cost. However, they just couldn&amp;#8217;t seem to improve. When I paid them a visit, I looked at their product development lifecycle as a whole. Their product roadmap was solid, their requirements specifications and test plans were clear, the team had all the right skills, and their quality was high. So what could be improved?&lt;/p&gt;

&lt;p&gt;This company thought they were doing all the right things. Then I interviewed the software team, and the truth came out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rework was killing them&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unbeknownst to senior management, product managers were frequently changing requirements after the original specifications were implemented and tested. I discovered that it was common for a couple of their product managers to ask their buddies on the development team to just go ahead and add this &lt;em&gt;one little thing&lt;/em&gt; as a favor. No big deal, right? They would add them, then these little changes would break 5 other things. Then 5 new bugs were opened, 5 fixes, 5 retests, and everything works again. At the end of the day, everything was working fine and someone got their pet feature added. Senior management was none the wiser.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s the problem: all that rework has a cost. You may think that because everyone is on salary that these off-book changes were &amp;#8220;free.&amp;#8221; &lt;strong&gt;You&amp;#8217;d be wrong.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consider opportunity cost&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All that time spent on sneaking in changes and fixing the fixes adds up. Time that could have been better spent on higher value features. I calculated that my client was losing around &lt;strong&gt;$340,000/year&lt;/strong&gt; to this unplanned rework! This obviously had to stop. What more could &lt;strong&gt;you&lt;/strong&gt; do with that kind of savings?&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s what we changed&amp;#8230;&lt;/p&gt;

&lt;p&gt;We introduced agile practices to the software development processes. This approach enables the incremental delivery of products, instead of one &amp;#8220;big bang&amp;#8221; at the end. Incremental delivery allows us to inspect and adapt to changing requirements &amp;#8211; with complete transparency.&lt;/p&gt;

&lt;p&gt;In order to deliver a product incrementally, we break down requirements into user stories, prioritize them in a backlog, and continuously implement, test, and release.&lt;/p&gt;

&lt;p&gt;Working in this manner &lt;strong&gt;minimizes rework&lt;/strong&gt;, isolating it to either small bug fixes, or refining the user stories in the current iteration. We can now inspect and adapt, consistently creating value instead of creating waste.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My client&amp;#8217;s organization is still adjusting to working iteratively &amp;#8211; the agile way. This is normal. But the payoff is immediate &amp;#8211; rework is negligible, and customers get to enjoy new features sooner. That translates to not only cost savings, but a much shorter path to new revenue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My Challenge for You&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Consider the following questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How much productivity in your organization is lost to rework? How would you know?&lt;/li&gt;
&lt;li&gt;Can you deliver a product incrementally? How frequently?&lt;/li&gt;
&lt;li&gt;What can you do right now to go faster, with higher quality, and at lower cost?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Need help answering these questions? &lt;a href=&#34;http://www.markrichman.com/contact/&#34;&gt;Give me a call&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;© 2015 Mark Richman. All Rights Reserved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Fail Fast and Succeed</title>
      <link>http://www.markrichman.com:1313/how-to-fail-fast-and-succeed/</link>
      <pubDate>Mon, 23 Nov 2015 18:25:50 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/how-to-fail-fast-and-succeed/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.markrichman.com/wp-content/uploads/2015/11/fail.jpg&#34;&gt;&lt;img class=&#34;size-medium wp-image-852 alignleft&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2015/11/fail-300x225.jpg&#34; alt=&#34;fail&#34; width=&#34;300&#34; height=&#34;225&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2015/11/fail-300x225.jpg 300w, http://www.markrichman.com/wp-content/uploads/2015/11/fail-1024x768.jpg 1024w, http://www.markrichman.com/wp-content/uploads/2015/11/fail.jpg 1600w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;With the end of the year fast approaching, my clients are now focusing like a laser what they would like to accomplish in 2016. Many are finalizing their technology strategy, investing in DevOps practices and tools, committing to Agile transformation, and leveraging the Cloud. All these efforts enable my clients to do two things they couldn&amp;#8217;t before: &lt;strong&gt;fail fast and pivot&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What do we mean by fail fast?&lt;/p&gt;

&lt;p&gt;When developing new solutions with my clients, we embrace a feedback loop. That is, quickly get something in front of customers, solicit feedback, inspect and adapt, and then decide how to proceed. Most often, we make changes to the product based on customer feedback, but sometimes we terminate a bad idea before more money is spent.&lt;/p&gt;

&lt;p&gt;Here, the concept of failure takes on new meaning. With previous non-agile processes, you would create a product over a long period of time and bring it to market fully baked. Then, the market would determine if what you created has value, meets needs, or just plain stinks. Time and money have been needlessly squandered.&lt;/p&gt;

&lt;p&gt;There is a better way&lt;/p&gt;

&lt;p&gt;I work with clients to &lt;strong&gt;redefine failure&lt;/strong&gt; as simply an iterative test of assumptions. We embrace the inevitable imperfections in our product, and &lt;strong&gt;pivot&lt;/strong&gt; to meet the market need. We do this early and often.&lt;/p&gt;

&lt;p&gt;Thomas Edison once said of his mistakes, &amp;#8220;I have not failed 10,000 times. I have not failed once. I have succeeded in proving that those 10,000 ways will not work. When I have eliminated the ways that will not work, I will find the way that will work.&amp;#8221;&lt;/p&gt;

&lt;p&gt;Being agile means your product is never done. I&amp;#8217;ve seen countless companies play roulette with ambitious products and initiatives. These efforts either fail to see the light of day, or once launched, crash and burn in the marketplace. Money, morale, and shareholder value go down the toilet.&lt;/p&gt;

&lt;p&gt;Working this way also allows us to more easily establish cause and effect. Perhaps a product performs poorly in the market because of a usability or design flaw. Maybe it&amp;#8217;s pricing. Or performance. If we make too many changes over too long a period of time, the distance between cause and effect prevents us from responding quickly to feedback. ​&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save Money While Making Money&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the late 90s and for a while after, I worked for a number of dot-com bubble startups. Absurd valuations, nebulous business models, and venture capital speculation were the name of the game. Companies used other people&amp;#8217;s money to produce products of questionable value, usually without profit. It was clearly unsustainable, which is why nearly all of those companies are gone now.&lt;/p&gt;

&lt;p&gt;Today, business owners, executives, investors, and shareholders want to see dividends early and often.&lt;/p&gt;

&lt;p&gt;Producing a product iteratively allows us to get revenue much earlier than ever before. We can use this revenue, even if minimal, to fund the development of additional features. We add value, then customers respond with more of their money. Another feedback loop.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challenge Questions for Business Leaders&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Does your process allow you to quickly and easily implement and test new features in the market?&lt;/li&gt;
&lt;li&gt;Can you quickly isolate which feature changes contribute to success and failure?&lt;/li&gt;
&lt;li&gt;How fast can you incorporate customer feedback into your next release?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;© 2015 Mark Richman. All Rights Reserved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Prevent Project Failure</title>
      <link>http://www.markrichman.com:1313/how-to-prevent-project-failure/</link>
      <pubDate>Tue, 17 Nov 2015 02:39:47 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/how-to-prevent-project-failure/</guid>
      <description>&lt;p class=&#34;p1&#34;&gt;
  &lt;img class=&#34;alignleft wp-image-840 size-medium&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2015/11/static1.squarespace-300x212.jpg&#34; alt=&#34;Choosing between failure and success&#34; width=&#34;300&#34; height=&#34;212&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2015/11/static1.squarespace-300x212.jpg 300w, http://www.markrichman.com/wp-content/uploads/2015/11/static1.squarespace.jpg 900w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;Many years ago, I subcontracted on a large software project. It was an automotive warranty claims processing system. Many consultants had cycled through this organization over 3 or 4 years, none ever seeming to make a dent towards completing the project. I personally spent eighteen months on this project. Rumor has it that almost $30 million was ultimately spent, with little to show for it. Yes, you read that correctly.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  How do unproductive projects fester like this for so long, and with such expense? I noticed a few behaviors that contributed to failure, and over the years, I’ve seen them time and time again. Do these sound familiar to you?
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  &lt;strong&gt;Unclear Objectives&lt;/strong&gt;
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  I’ve seen dozens of projects fail simply because nobody knew why they were working on them. It may seem obvious that anyone involved in a project would know why they are working on it, but this often isn’t the case over time. Competing objectives at the executive level tend to morph a project from trying to satisfy one objective to many. I’ve also seen ambitious executives use one project to try to “sneak” another one in under the radar. This has the net effect of fuzzy goals, scope creep, and lousy technical design. Timelines inevitably slide, nothing ships, and morale suffers.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  &lt;strong&gt;Constantly Changing Requirements&lt;/strong&gt;
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  After over two decades in software engineering, I am still amazed when I see project requirements changing often, yet every other variable is held constant. That is, you are given a deadline, a set headcount and budget, and are told to “make due” when requirements change every other day. This is a recipe for failure and burnout, and it’s unsustainable. Something has to give, and it’s usually quality first.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  &lt;strong&gt;Vaporware&lt;/strong&gt;
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  Your sales team is presenting at an industry trade show. A senior executive of a Fortune 500 organization they have been trying to land stops by for a demo. She is dazzled by what she sees, and the sales team promises not only the moon and stars, but also delivery in eight weeks. There’s just one problem &amp;#8211; the product doesn’t exist yet. Now your engineering team is tasked with innovating on a deadline. This is known as “vaporware.” To make matters worse, the CIO hasn’t been consulted on matters of budget, priority, headcount, or complexity. But the CEO sees dollar signs, and orders the troops to “make it happen.” What could possibly go wrong?
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  &lt;strong&gt;Overengineering&lt;/strong&gt;
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  We’ve discussed scope creep. This one is a little more insidious &amp;#8211; scope &lt;i&gt;seep&lt;/i&gt;. That is, features, functionality, and other complexity introduced not by the client, but by the engineers themselves. Many engineers are tempted to “gold plate” their solutions with fancy methodologies, standards, or technologies, with the intent of maximizing quality. While this is well-intended, it tends to inflate projects in both time and cost. Now, I’m not suggesting we abandon proven approaches, but we must remain practical and flexible…we must be &lt;b&gt;agile&lt;/b&gt;.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  &lt;strong&gt;Agile to the Rescue&lt;/strong&gt;
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  I work with clients to deliver software in as little as 30 days. I don’t mean a canned demo. I mean &lt;b&gt;working software&lt;/b&gt;. We achieve this through agile practices which address the symptoms I mentioned above. We start with clear objectives &amp;#8211; the business outcomes you seek to achieve. Then we establish the metrics by which that success will be measured. Therein, we will discover value. Using the objectives, metrics, and value as “guard rails” for a project, we are free to embrace changing requirements, avoid the trap of vaporware, and deliver just the right amount of engineering to ship software early and often.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  Challenge Questions for Business Leaders:
&lt;/p&gt;

&lt;ol class=&#34;ol1&#34;&gt;
  &lt;li class=&#34;li1&#34;&gt;
    How many of your projects have failed over the years due to one or more of the above reasons?
  &lt;/li&gt;
  &lt;li class=&#34;li1&#34;&gt;
    Are you able to easily accommodate changes, manage risks, and lower expenses for any given project?
  &lt;/li&gt;
  &lt;li class=&#34;li1&#34;&gt;
    How quickly can you respond to market demand for new features?
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p class=&#34;p1&#34;&gt;
  © 2015 Mark Richman. All Rights Reserved.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Never Enough Time to Test</title>
      <link>http://www.markrichman.com:1313/never-enough-time-to-test/</link>
      <pubDate>Mon, 09 Nov 2015 16:27:39 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/never-enough-time-to-test/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;size-full wp-image-829 alignleft&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2015/11/not-enough-time-to-test.jpg&#34; alt=&#34;not-enough-time-to-test&#34; width=&#34;400&#34; height=&#34;312&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2015/11/not-enough-time-to-test-300x234.jpg 300w, http://www.markrichman.com/wp-content/uploads/2015/11/not-enough-time-to-test.jpg 400w&#34; sizes=&#34;(max-width: 400px) 100vw, 400px&#34; /&gt;I&amp;#8217;ve worked with dozens of organizations and teams making the transition to Agile &amp;#8211; specifically Scrum. The same issues constantly arise, almost always around testing. According to Scrum, a Product Backlog Item (PBI) is never &lt;strong&gt;done&lt;/strong&gt; until it is potentially shippable. That means code complete, tested, and documented, with a pretty bow on top&amp;#8230;it&amp;#8217;s not just done, it&amp;#8217;s &lt;strong&gt;done done&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Because we work in a timebox &amp;#8211; the Sprint &amp;#8211; we have a hard date from which to work backwards, usually two weeks. So this begs the question, while developers are coding away in the beginning of a sprint, what the heck are the testers doing? Sure, they can develop their test plans, but that isn&amp;#8217;t as time consuming as development, so I usually see testers relatively idle until developers start closing out tasks.&lt;/p&gt;

&lt;p&gt;This workflow creates a dilemma, where the sprint is inevitably end-loaded with testing work, leaving little time for rework and bug fixes. Often times, PBIs are incomplete at the end of a sprint, and they spill over into the next sprint for completion.&lt;/p&gt;

&lt;p&gt;One could suggest coding in one sprint, and then testing in the next, but this is effectively accelerated Waterfall, sometimes called Scrummerfall or Waterscrum. Whatever you call it, it&amp;#8217;s anti-Agile.&lt;/p&gt;

&lt;p&gt;Another remedy could be to extend the sprint from, say 2 weeks to 3. But that generally has the effect of &lt;a href=&#34;https://en.wikipedia.org/wiki/Parkinson%27s_law&#34; target=&#34;_blank&#34;&gt;Parkinson&amp;#8217;s Law&lt;/a&gt; on the sprint, where the work expands to fill the time allowed. You still end up with an end-loaded sprint; you just take longer to end up in the same place.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do we get testers testing sooner&lt;/strong&gt;, and prevent developers from rushing to get incomplete work in their hands?&lt;/p&gt;

&lt;p&gt;When refining the product backlog, we look for opportunities to decompose items. This helps create more fine-grained tasks, which in turn can be coded and tested with greater throughput. As these PBIs are selected for inclusion in a Sprint, we can enjoy a more fluid workflow.&lt;/p&gt;

&lt;p&gt;Challenge Questions for Business Leaders:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How effective is your team at maximizing their throughput and efficiency?&lt;/li&gt;
&lt;li&gt;How well does your team work under pressure to deliver on tight deadlines?&lt;/li&gt;
&lt;li&gt;How much happier would your customers be if given smaller feature enhancements, but much more often?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;© 2015 Mark Richman. All Rights Reserved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>We’ve Always Done it That Way (WADITW)</title>
      <link>http://www.markrichman.com:1313/weve-always-done-it-that-way-waditw/</link>
      <pubDate>Thu, 29 Oct 2015 19:42:53 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/weve-always-done-it-that-way-waditw/</guid>
      <description>&lt;p&gt;People hate change. We have our habits, routines, and preferences that drive us to act, or in many cases &lt;strong&gt;fail to act&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;size-medium wp-image-809 alignleft&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2015/10/habits-300x155.jpg&#34; alt=&#34;habits&#34; width=&#34;300&#34; height=&#34;155&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2015/10/habits-300x155.jpg 300w, http://www.markrichman.com/wp-content/uploads/2015/10/habits-1024x528.jpg 1024w, http://www.markrichman.com/wp-content/uploads/2015/10/habits.jpg 1445w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When I engage with a new client, I spend a lot of time not only understanding their business processes, but also the &lt;strong&gt;rationale&lt;/strong&gt; for those processes. It&amp;#8217;s my job to question and challenge these processes, with the goal of improving (or even removing) them to create new value for my clients.&lt;/p&gt;

&lt;p&gt;I am constantly surprised by really smart, educated clients who tell me &amp;#8220;we&amp;#8217;ve always done it that way,&amp;#8221; unable to explain the reasons why things are so. They have a belief that deviating from this norm will somehow cause loss or pain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Throw out the process manual&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve worked with Fortune 500 organizations that needed to innovate quickly. However, the regulatory and compliance climate of the past 15 years created processes and procedures that continued to drive organizational behavior. Traditional product development approaches took too long, and by the time the solution was delivered, it was either uncompetitive or obsolete.&lt;/p&gt;

&lt;p&gt;My most successful clients took a leap of faith and adopted agile or lean methods to quickly deliver new offerings to customers. Initially, they resisted this major change, comfortable in their &amp;#8220;we&amp;#8217;ve always done it that way&amp;#8221; approach.&lt;/p&gt;

&lt;p&gt;I can understand their hesitation. I had one client who &lt;strong&gt;actually preferred&lt;/strong&gt; a 100 page specification document, Gantt chart, work breakdown structure, fixed cost estimates, and a firm deadline. This approach offered the &lt;strong&gt;perception of a guaranteed budget, scope, and date&lt;/strong&gt;.  The budget, scope, and date of any project inevitably change. In over twenty years, I&amp;#8217;ve never had a project stick to all three.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I&amp;#8217;m not here to sell you a methodology&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Consultants love their methodologies. I don&amp;#8217;t have one to sell you because I don&amp;#8217;t believe in one-size-fits-all when it comes to my clients&amp;#8217; success. What I will offer you are these &lt;strong&gt;advantages&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Change&lt;/strong&gt; &amp;#8211; We accept the fact that scope will change over the life of a project. User feedback, external factors (competitors, regulations, etc.), and unforeseen complexity are givens. We avoid failure by delivering the system that is needed, as opposed to one designed in a vacuum.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Iteration&lt;/strong&gt; &amp;#8211; The ideal way to address change is to work in discrete steps towards an end state that we accept to be in flux. Details change. We gain new insights along the way. We inspect and adapt. Working this way avoids costly and time consuming requirements documents. My clients&amp;#8217; staff is energized by being able to work on something new &lt;strong&gt;early and often&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feedback&lt;/strong&gt; &amp;#8211; In order to identify and act upon change, we need frequent feedback. I coach most of my clients in Scrum (or some agile variant thereof), whose various &amp;#8220;ceremonies&amp;#8221; include a daily standup, sprint review, and retrospective. My clients welcome this approach, as changing insights, requirements, and risks are discovered regularly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Value&lt;/strong&gt; &amp;#8211; I help my clients achieve business value at the end of every iteration or sprint. We will have a potentially &lt;strong&gt;shippable product&lt;/strong&gt; every few weeks. This success engages customers and delights end users, where they can see the project has taken on life.&lt;/p&gt;

&lt;p&gt;Software development is an unpredictable process. I help my clients &lt;strong&gt;take the risk out of the chaos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Questions for Business Leaders:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How easily can you adapt to rapid change with your current process?&lt;/li&gt;
&lt;li&gt;Are your customers involved in your product development process, or do they only see the end result?&lt;/li&gt;
&lt;li&gt;Does your organization collaborate, or do they follow draconian processes?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;© 2015 Mark Richman. All rights reserved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Taking off from a Short Runway</title>
      <link>http://www.markrichman.com:1313/taking-off-from-a-short-runway/</link>
      <pubDate>Mon, 26 Oct 2015 13:54:35 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/taking-off-from-a-short-runway/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;alignleft wp-image-801&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2015/10/6a00d8341c630a53ef01630626d091970d-640wi.jpg&#34; alt=&#34;SANTA ANA, CA - NOVEMBER, 23, 2011: A U.S. Airways airplane flies over the 405 freeway as it approaches it&#39;s landing at John Wayne Airport in Orange County as travelers make their way to their destinations in time to celebrate Thanksgiving. ( Allen J. Schaben  / Los Angeles Times)&#34; width=&#34;477&#34; height=&#34;301&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2015/10/6a00d8341c630a53ef01630626d091970d-640wi-300x189.jpg 300w, http://www.markrichman.com/wp-content/uploads/2015/10/6a00d8341c630a53ef01630626d091970d-640wi-320x202.jpg 320w, http://www.markrichman.com/wp-content/uploads/2015/10/6a00d8341c630a53ef01630626d091970d-640wi.jpg 640w&#34; sizes=&#34;(max-width: 477px) 100vw, 477px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;John Wayne airport in Santa Ana, California has a rather unique set of takeoff requirements. Its runway, at 5,701 feet, is one of the shortest among commercial airports in the US. A Boeing 757 is the largest airplane that can be accommodated. It also has very strict noise requirements. My cousin lives next door in quiet Irvine, and told me that airplanes must take off at full throttle, shooting off the runway like a rocket, then quickly back down the engines to keep quiet.&lt;/p&gt;

&lt;p&gt;This made me think of some of the companies with whom I&amp;#8217;ve worked. Many were startups, either bootstrapping themselves or anemically funded with venture capital. Others were reasonably mature, but lacked sufficient capitalization to execute on their strategy effectively.&lt;/p&gt;

&lt;p&gt;A major issue with these types of companies is that they have lofty goals, but want everything under the sun in a short time frame. And their budgets are limited. The classical project management response to this situation is, &amp;#8220;you can have good, fast, and cheap. Pick two.&amp;#8221; &lt;strong&gt;I hate this answer&lt;/strong&gt;, and it reeks of in-the-box thinking.&lt;/p&gt;

&lt;p&gt;Agile software development works perfectly with short runways. You can get a high quality result in a short time frame. &lt;strong&gt;You can get the airplane off the ground before you run out of runway.&lt;/strong&gt; You just have to change your thinking a bit. Focus on what you &lt;strong&gt;need, &lt;/strong&gt;not what you &lt;strong&gt;want&lt;/strong&gt;. I&amp;#8217;ve found these are often not the same things.&lt;/p&gt;

&lt;p&gt;You will likely need some coaching to get comfortable with this approach. I help my clients evaluate their strategic goals and tactical objectives, formulating a launch plan that can get the proverbial plane off the ground with runway to spare.&lt;/p&gt;

&lt;p&gt;© 2015 by Mark Richman. All Rights Reserved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Success with Offshore Teams</title>
      <link>http://www.markrichman.com:1313/success-with-offshore-teams/</link>
      <pubDate>Tue, 25 Aug 2015 03:07:02 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/success-with-offshore-teams/</guid>
      <description>&lt;p&gt;While a steadily growing number of organizations have been moving their resources offshore, it still remains an involved, high-risk decision.&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400;&#34;&gt;Most companies consider moving at least some of their workload offshore for cost reduction and “follow the sun” coverage for support staff. I’ve worked with companies of all sizes to integrate offshore teams, and what I’ve found interesting is the common challenges they have. Most notably, they cite while labor costs are lower, product quality decreases, and projects take longer to complete. As a consequence, &lt;/span&gt;&lt;strong&gt;onshore rework&lt;/strong&gt; &lt;span style=&#34;font-weight: 400;&#34;&gt;to correct offshore defects erodes the cost savings offered by offshoring. Projects take longer to complete, deadlines are missed, and team morale suffers.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pride and Prejudice&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400;&#34;&gt;One client of mine, a publicly traded e-commerce company, engaged a team in India to handle bug fixes and some new development work. The team here in the US thumbed their noses at the idea, steadfast in their prejudice that “those people in India” lacked the skill to do the work. The onshore team viewed the offshore team as a threat to their jobs, and the onshore didn’t participate enthusiastically in the relationship.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400;&#34;&gt;I insisted that the offshore team was not there to steal their jobs, but rather to free them from less interesting work. The onshore team could then focus on higher value projects, where their expensive skills and institutional knowledge of the company could best be capitalized upon. In addition, &lt;/span&gt;&lt;strong&gt;core development&lt;/strong&gt; &lt;span style=&#34;font-weight: 400;&#34;&gt;was kept onshore, where at least one leader/senior developer was responsible. Without a control like this, it&amp;#8217;s impossible to know if the product you&amp;#8217;re receiving from offshore is of any quality.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Communication Complexity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400;&#34;&gt;This is the &lt;/span&gt;&lt;strong&gt;number one reason&lt;/strong&gt; &lt;span style=&#34;font-weight: 400;&#34;&gt;why offshoring will fail. With a team half a world and half a day away, there is little overlap in the teams’ work days in which to share information. Here is where a solid process, and the collaboration tools to enable it are most valuable.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400;&#34;&gt;Here are some tools and techniques that work for my clients:&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;li style=&#34;font-weight: 400;&#34;&gt;
  &lt;span style=&#34;font-weight: 400;&#34;&gt;Minimize dependencies between onshore and offshore resources. Your expensive onshore resources shouldn’t be blocked while waiting for offshore folks to complete tasks.&lt;/span&gt;
&lt;/li&gt;
&lt;li style=&#34;font-weight: 400;&#34;&gt;
  &lt;span style=&#34;font-weight: 400;&#34;&gt;Use great collaboration tools. Basecamp for less technical teams, YouTrack or JIRA for project and task management, Snagit or Jing for screen captures, Dropbox or OneDrive for file sharing, and so on. There are nearly limitless choices here.&lt;/span&gt;
&lt;/li&gt;
&lt;li style=&#34;font-weight: 400;&#34;&gt;
  &lt;span style=&#34;font-weight: 400;&#34;&gt;Treat your offshore resources as if they were local. Ensure they are always included in communications, meetings, or other relevant events. If you act as if they’re conscripted labor, then you will get exactly the kinds of behaviors back that you have induced—transactional, low-quality work with little documentation from a generally unmotivated workforce.&lt;/span&gt;
&lt;/li&gt;
&lt;li style=&#34;font-weight: 400;&#34;&gt;
  &lt;span style=&#34;font-weight: 400;&#34;&gt;Never let your onshore team refer to your offshore team as “them.” Seriously, it helps.&lt;/span&gt;
&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choose the right offshore partner&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400;&#34;&gt;When selecting an offshore vendor, seek a partner that understands and adheres to agile practices such as test-driven development and continuous integration testing. The remote team also needs to be managed locally. That is, they need they need a local leader that they report to. This further minimizes communication complexity.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get the right people on the bus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400;&#34;&gt;Product Managers at home must understand iterative and progressive development, minimal viable product, and how to prioritize a product backlogs. You want very short sprints (1-2 weeks long) and tight feedback loops. It&amp;#8217;s not about having someone offshore that never makes a single mistake, it&amp;#8217;s that the mistakes must be easily found and quickly fixed. And for that, you need practical use of Agile tools and techniques. &lt;/span&gt;&lt;strong&gt;Apply these same tactics both onshore and offshore.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400;&#34;&gt;Success, not perfection, is an incremental process. If you stick to these basic assumptions, you should be able to work offshore with great results. &lt;/span&gt;&lt;span style=&#34;font-weight: 400;&#34;&gt;&lt;a href=&#34;http://www.markrichman.com&#34;&gt;Give me a call&lt;/a&gt;, and I can help you choose what’s best for your team.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;© 2015 Mark Richman. All Rights Reserved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How agile are you? It really does matter.</title>
      <link>http://www.markrichman.com:1313/how-agile-are-you-it-really-does-matter/</link>
      <pubDate>Tue, 21 Oct 2014 12:11:45 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/how-agile-are-you-it-really-does-matter/</guid>
      <description>

&lt;p&gt;In 2010, Esther Derby &lt;a href=&#34;http://www.estherderby.com/2010/06/achieving-agility-means-to-an-end-or-end-in-itself-2.html&#34; target=&#34;_blank&#34;&gt;wrote&lt;/a&gt;, “How agile you are doesn’t matter. Whether you are 50 per cent agile, 90 per cent agile or agile through and through (what ever that means), doesn’t matter. What does matter is that your company is satisfying its customers, stakeholders, and employees.”&lt;/p&gt;

&lt;p&gt;While it’s critical to satisfy those groups in order to keep the lights on, you can’t reach the &lt;strong&gt;next level of performance&lt;/strong&gt; in your business by simply remaining afloat. How do we plot a course to peak levels of performance? How will we know when we’ve achieved it? First we must know where we are before we know where we’re headed.&lt;/p&gt;

&lt;p&gt;Since the 1980s, we have used tools such as the Capability Maturity Model (CMM) to formally measure and optimize business processes. As Agile development became more mainstream, the industry has sought to adopt a similar approach to measuring “agility.” Allow me to propose my own take on this approach.&lt;/p&gt;

&lt;p&gt;With Scrum as the most widely adopted Agile approach, we can look at not only its adoption rate across organizations, but also within a single organization. In addition to Scrum, we can observe other agile practices as well, such as test-driven development (TDD), continuous integration, etc. Within a single organization, I have identified six levels at which we can observe and measure Agile Maturity.&lt;/p&gt;

&lt;h2 id=&#34;level-0-8211-individual-agile-maturity&#34;&gt;Level 0 &amp;#8211; Individual Agile Maturity&lt;/h2&gt;

&lt;p&gt;This level is effectively an individual treading water to survive within chaos. There may be effective functional management, but it is often a command-and-control dictatorship. We often see little or no alignment between business units. We may also see extremes in process controls; either no controls at all (a free-for-all), or a draconian level of process which grinds productivity to a virtual halt. Individual and team morale is low.&lt;/p&gt;

&lt;p&gt;The agile individual survives by trying to create order, leveraging tools and techniques he can control with relative autonomy. For example, he utilizes test-driven development (TDD) to maximize the quality of his individual work.&lt;/p&gt;

&lt;h2 id=&#34;level-1-8211-team-agile-maturity&#34;&gt;Level 1 &amp;#8211; Team Agile Maturity&lt;/h2&gt;

&lt;p&gt;At this level, we see adoption of agile techniques, such as Scrum. While the team may not be completely fluent in the nuances of agile development, we see them working with some degree of autonomy. From a business perspective, there is no change from Level 0, as other teams are either unaware of the agile approach used by one another, or have yet to integrate with each other.&lt;/p&gt;

&lt;p&gt;The agile team is marginally more productive, due to the presence of a Scrum Master and Product Owner, who act as buffers, keeping developers focused, productive, and of higher morale.&lt;/p&gt;

&lt;h2 id=&#34;level-2-8211-cross-team-agile-maturity&#34;&gt;Level 2 &amp;#8211; Cross-Team Agile Maturity&lt;/h2&gt;

&lt;p&gt;Here we see agile practices, such as Scrum, Kanban, eXtreme Programming (XP), TDD and others used consistently within teams. We also see agile practices utilized across teams, such as a Scrum-of-Scrums, often with the assistance of an external agile coach.&lt;/p&gt;

&lt;p&gt;Productivity is measurably improved, but we may also see evidence of “storming” as some teams revert back to non-agile approaches. This often occurs when business owners and formal project management conflict with the adaptive nature of agile techniques. I call this the “failsafe vs. safefail phenomenon.”&lt;/p&gt;

&lt;h2 id=&#34;level-3-8211-business-unit-agile-maturity&#34;&gt;Level 3 &amp;#8211; Business Unit Agile Maturity&lt;/h2&gt;

&lt;p&gt;Business owners are now starting to integrate into the emerging cross-team agile culture. As the agile development teams begin to deliver more value, the business owners become more engaged and begin to evangelize the approach to their peers. We see agile teams moving from “storming” to “norming” as they are enjoying the benefits of agile, such as maximized productivity and morale.&lt;/p&gt;

&lt;h2 id=&#34;level-4-8211-project-management-agile-maturity&#34;&gt;Level 4 &amp;#8211; Project Management Agile Maturity&lt;/h2&gt;

&lt;p&gt;We often see Project Managers, along with functional managers, as the first roles which are threatened by the emergence of Agile within an organization. As the distinction between project manager and Scrum master becomes clearer, the interference with the development teams’ activities is minimized. The teams now enjoy nearly full autonomy. Larger and more ambitious projects are now trusted to be run with an Agile approach. The benefits of Agile are spreading outside of IT and the PMO.&lt;/p&gt;

&lt;h2 id=&#34;level-5-8211-enterprise-agile-maturity&#34;&gt;Level 5 &amp;#8211; Enterprise Agile Maturity&lt;/h2&gt;

&lt;p&gt;With level five performance, we see a fully aligned and autonomous set of teams and departments. Executives begin to avoid micromanaging teams and focus on strategic goals instead of tactics. We also see the emergence of Agile practices leveraged in non-IT projects.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;While maximizing value for customers, stakeholders, and employees is critical to business success, it’s just one spoke on a larger wheel. Let this article be your guide in helping you to answer this question for yourself: How agile are you? It really does matter.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Alignment vs. Autonomy</title>
      <link>http://www.markrichman.com:1313/alignment-vs-autonomy/</link>
      <pubDate>Sun, 12 Oct 2014 14:48:39 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/alignment-vs-autonomy/</guid>
      <description>&lt;p&gt;Alignment occurs when leaders and teams share the same values and work towards a common goal. Autonomy allows teams to work independently of leaders and each other. The stronger alignment we have, the more autonomy we can afford to grant. The leader’s job is to communicate what problem needs to be solved, and why. The team’s job is to collaborate with each other to find the best solution.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter wp-image-586 size-large&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2014/10/Alignment-vs.-Autonomy-1024x890.png&#34; alt=&#34;Alignment vs. Autonomy&#34; width=&#34;669&#34; height=&#34;581&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2014/10/Alignment-vs.-Autonomy-300x261.png 300w, http://www.markrichman.com/wp-content/uploads/2014/10/Alignment-vs.-Autonomy-1024x890.png 1024w&#34; sizes=&#34;(max-width: 669px) 100vw, 669px&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>