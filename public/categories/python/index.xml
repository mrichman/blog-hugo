<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Mark Richman Consulting</title>
    <link>http://www.markrichman.com:1313/categories/python/</link>
    <description>Recent content in Python on Mark Richman Consulting</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 Oct 2015 00:36:19 +0000</lastBuildDate>
    <atom:link href="http://www.markrichman.com:1313/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Programming Language Choice Doesn’t Matter</title>
      <link>http://www.markrichman.com:1313/programming-language-choice-doesnt-matter/</link>
      <pubDate>Mon, 26 Oct 2015 00:36:19 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/programming-language-choice-doesnt-matter/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;alignnone wp-image-792&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2015/10/prog-languages.png&#34; alt=&#34;prog-languages&#34; width=&#34;437&#34; height=&#34;182&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2015/10/prog-languages-300x125.png 300w, http://www.markrichman.com/wp-content/uploads/2015/10/prog-languages.png 620w&#34; sizes=&#34;(max-width: 437px) 100vw, 437px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Microsoft sucks. Java is dead. Rails can&amp;#8217;t scale. Python is slow. I&amp;#8217;ve heard it all, and I can tell you &lt;strong&gt;none of it matters.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Developers are an interesting breed; they tend to stick to what they know best, but also love to tinker with new technologies. These experiments often fail at the expense of a project&amp;#8217;s success, however.&lt;/p&gt;

&lt;p&gt;Many of my clients struggle with technology choice for new projects. Business owners and executives are hesitant to try newer technologies, but by the same token don&amp;#8217;t want to be left driving an Edsel. &lt;em&gt;If you&amp;#8217;re younger than 40, you probably didn&amp;#8217;t get that.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So why do I say these choices don&amp;#8217;t matter? When it comes to programming languages/platforms, what matters most to my clients is &lt;strong&gt;speed&lt;/strong&gt;. Time to market is everything. That said, here are some &amp;#8220;guard rails&amp;#8221; to help guide your thinking:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use What You Know&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;re a business owner or executive with technology experience, you probably have a bias when it comes to specific technologies. If you&amp;#8217;re a .NET gal, for example, you&amp;#8217;ll probably pick that because you&amp;#8217;ll more easily understand what&amp;#8217;s delivered. If you have a development team, ask them what they want to use. You may find that your team of PHP geeks absolutely hates using that, and would love to switch to Ruby, Node.js, or some better tool for the job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use What You Can Hire&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You may have a preference for a particular technology, but the local job market is devoid of candidates. I live in South Florida, and it&amp;#8217;s been almost entirely Microsoftland for 15 years. That&amp;#8217;s changing, but my local clients tend to stick with Microsoft technologies just because of the availability of local talent. Some of my other clients are comfortable with remote workers, so the talent pool for other technologies is far larger.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use What You Can Learn Quickly&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve worked with many companies that were steadfast Microsoft shops for years. Newer technologies, changes in leadership, or other factors sometimes inspire a look at something new. Given the choice between _Shiny New Object &lt;strong&gt;A&lt;/strong&gt; or &lt;strong&gt;B&lt;/strong&gt;, _if all things are equal, choose the one you can learn quickly. Remember &amp;#8211; time to market.&lt;/p&gt;

&lt;p&gt;When choosing a new technology, don&amp;#8217;t get stuck in analysis paralysis.&lt;/p&gt;

&lt;p&gt;© 2015 Mark Richman. All rights reserved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Flask and Redis for Session Storage</title>
      <link>http://www.markrichman.com:1313/using-flask-redis-session-storage/</link>
      <pubDate>Fri, 28 Feb 2014 16:42:07 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/using-flask-redis-session-storage/</guid>
      <description>&lt;p&gt;Implementation of the Flask session interface using Redis as storage&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mrichman/flask-redis&#34;&gt;https://github.com/mrichman/flask-redis&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Python Decorators</title>
      <link>http://www.markrichman.com:1313/intro-to-python-decorators/</link>
      <pubDate>Sun, 17 Nov 2013 16:27:52 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/intro-to-python-decorators/</guid>
      <description>

&lt;h1 id=&#34;what-are-decorators&#34;&gt;What are Decorators?&lt;/h1&gt;

&lt;p&gt;In Python, functions are first-class objects. They can be passed as variables, and have attributes,&lt;/p&gt;

&lt;p&gt;just like any other object. They can also be &lt;em&gt;returned&lt;/em&gt; from other functions!&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;outer_func&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;():&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;2&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;inner_func&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;():&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;3&amp;lt;/span&gt;         &amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;s&#34;&gt;&#39;Inner funk!&#39;&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;4&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;return&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;inner_func&amp;lt;/span&gt;  &amp;lt;span class=&#34;c&#34;&gt;# notice, no parens!&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note the absence of parentheses when returning &lt;code&gt;inner_func&lt;/code&gt; above. Here we are not &lt;em&gt;calling&lt;/em&gt; the function,&lt;/p&gt;

&lt;p&gt;but rather returning a reference to the function. We can use this reference to invoke &lt;code&gt;inner_func&lt;/code&gt; as follows:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;text&#34;&gt;&amp;gt;&amp;gt;&amp;gt; inner = outer_func()
&amp;gt;&amp;gt;&amp;gt; inner()
Inner funk!
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The call to &lt;code&gt;outer_func&lt;/code&gt; above simply returns a reference to &lt;code&gt;inner_func&lt;/code&gt;, then we invoke &lt;code&gt;inner_func&lt;/code&gt; by&lt;/p&gt;

&lt;p&gt;calling its reference as &lt;code&gt;inner()&lt;/code&gt; (with parentheses this time).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A decorator is simply a function that returns a function.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;creating-a-decorator&#34;&gt;Creating a Decorator&lt;/h1&gt;

&lt;p&gt;Let’s start with the simplest decorator possible &amp;#8211; one that does virtually nothing. We will call this construct the “Identity Decorator”:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;identity&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;func&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;2&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;_identity&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;*&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;args&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;**&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;kwargs&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;3&amp;lt;/span&gt;         &amp;lt;span class=&#34;k&#34;&gt;return&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;func&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;*&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;args&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;**&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;kwargs&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;4&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;return&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;_identity&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This decorator simply returns what ever function and argument(s) was passed to it, without modification. To use a decorator, prefix the method of your choice with the &lt;code&gt;@&lt;/code&gt; symbol followed by the decorator function name:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;nd&#34;&gt;@identity&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;2&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;foo&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;bar&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;3&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;pass&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The decorator &lt;code&gt;identity&lt;/code&gt; will take the function &lt;code&gt;foo&lt;/code&gt; as its parameter, and return it unmodified. Now let’s try something concrete.&lt;/p&gt;

&lt;h1 id=&#34;say-hello&#34;&gt;Say Hello&lt;/h1&gt;

&lt;p&gt;We can create a decorator to print “Hello” to the console whenever the function it decorates is called.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;hello&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;func&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;2&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;inner&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;*&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;args&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;**&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;kwargs&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;3&amp;lt;/span&gt;         &amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;s&#34;&gt;&#34;Hello&#34;&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;4&amp;lt;/span&gt;         &amp;lt;span class=&#34;k&#34;&gt;return&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;func&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;*&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;args&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;**&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;kwargs&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;5&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;return&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;inner&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here, the &lt;code&gt;hello&lt;/code&gt; function is the decorator. Within this function is a &lt;em&gt;nested function&lt;/em&gt; called &lt;code&gt;inner&lt;/code&gt; which prints “Hello” to the console. It then calls the function passed into &lt;code&gt;hello&lt;/code&gt;, along with its arguments, if any.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;nd&#34;&gt;@hello&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;2&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;foo&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;():&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;3&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;s&#34;&gt;&#34;Sweet Charlie&#34;&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I chose &lt;code&gt;inner&lt;/code&gt; for the nested function arbitrarily. You can use any name you like. Now, when we call &lt;code&gt;foo&lt;/code&gt; we will get the following output:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;text&#34;&gt;In [1]: def hello(func):
   ...:     def inner(*args, **kwargs):
   ...:         print(&#34;Hello&#34;)
   ...:         return func(*args, **kwargs)
   ...:     return inner
   ...: @hello
   ...: def foo():
   ...:     print(&#34;Sweet Charlie&#34;)
   ...: foo()
   ...: 
Hello
Sweet Charlie
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, for any function decorated with &lt;code&gt;@hello&lt;/code&gt;, The string “Hello” will be printed to the console. We can build a more complex &amp;#8211; and useful &amp;#8211; example on top of this decorator.&lt;/p&gt;

&lt;h1 id=&#34;use-case-logging-with-decorators&#34;&gt;Use Case: Logging with Decorators&lt;/h1&gt;

&lt;p&gt;Let’s create a &lt;em&gt;logging&lt;/em&gt; decorator, which will print the name of the called function, along with any parameters passed to it:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt; 1&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;logger&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;func&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 2&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;inner&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;*&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;args&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;**&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;kwargs&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 3&amp;lt;/span&gt;        &amp;lt;span class=&#34;n&#34;&gt;res&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;func&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;*&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;args&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;**&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;kwargs&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 4&amp;lt;/span&gt;        &amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;func&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;__name__&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;args&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;kwargs&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 5&amp;lt;/span&gt;        &amp;lt;span class=&#34;k&#34;&gt;return&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;res&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 6&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;return&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;inner&amp;lt;/span&gt;      
&amp;lt;span class=&#34;lineno&#34;&gt; 7&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt; 8&amp;lt;/span&gt; &amp;lt;span class=&#34;nd&#34;&gt;@logger&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 9&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;do_something&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;foo&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;bar&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;10&amp;lt;/span&gt;   &amp;lt;span class=&#34;k&#34;&gt;pass&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Console output:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;text&#34;&gt;&amp;gt;&amp;gt;&amp;gt; do_something(1,2)
do_something (1, 2) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Our &lt;code&gt;logger&lt;/code&gt; function, upon a call to &lt;code&gt;do_something(1,2)&lt;/code&gt; simply printed out the function name &lt;code&gt;do_something&lt;/code&gt; and its arguments as the tuple &lt;code&gt;(1,2)&lt;/code&gt;. No keyword (named) arguments were supplied, so the empty dictionary &lt;code&gt;{}&lt;/code&gt; was printed.&lt;/p&gt;

&lt;p&gt;Replacing the positional arguments with keyword arguments to &lt;code&gt;do_something&lt;/code&gt; emits the following log statement:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;text&#34;&gt;&amp;gt;&amp;gt;&amp;gt; do_something(foo=1,bar=2)
do_something () {&#39;foo&#39;: 1, &#39;bar&#39;: 2}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, anytime you want to do a little &lt;em&gt;poor man’s debugging&lt;/em&gt; you can use the &lt;code&gt;@log&lt;/code&gt; decorator without having to modify any of your existing code. Consider a more robust version of this logger using the built in &lt;a href=&#34;http://docs.python.org/2/howto/logging.html&#34;&gt;&lt;code&gt;logging&lt;/code&gt;&lt;/a&gt; module.&lt;/p&gt;

&lt;h1 id=&#34;use-case-timing-a-function&#34;&gt;Use Case: Timing a Function&lt;/h1&gt;

&lt;p&gt;We can implement another handy tool to measure the performance of a function.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;timeit&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;func&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;2&amp;lt;/span&gt;     &amp;lt;span class=&#34;sd&#34;&gt;&#34;&#34;&#34;A decorator that prints the time a function takes to execute.&#34;&#34;&#34;&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;3&amp;lt;/span&gt;     &amp;lt;span class=&#34;kn&#34;&gt;import&amp;lt;/span&gt; &amp;lt;span class=&#34;nn&#34;&gt;time&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;4&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;wrapper&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;*&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;args&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;**&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;kwargs&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;5&amp;lt;/span&gt;         &amp;lt;span class=&#34;n&#34;&gt;t&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;time&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;time&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;6&amp;lt;/span&gt;         &amp;lt;span class=&#34;n&#34;&gt;res&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;func&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;*&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;args&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;**&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;kwargs&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;7&amp;lt;/span&gt;         &amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;func&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;__name__&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;time&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;time&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;-&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;t&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;8&amp;lt;/span&gt;         &amp;lt;span class=&#34;k&#34;&gt;return&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;res&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;9&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;return&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;wrapper&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s simulate a slow-running function:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;kn&#34;&gt;import&amp;lt;/span&gt; &amp;lt;span class=&#34;nn&#34;&gt;time&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;2&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt;3&amp;lt;/span&gt; &amp;lt;span class=&#34;nd&#34;&gt;@timeit&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;4&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;slow&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;():&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;5&amp;lt;/span&gt;     &amp;lt;span class=&#34;n&#34;&gt;time&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;sleep&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;5&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When we call &lt;code&gt;slow&lt;/code&gt; we introduce an artificial delay of 5 seconds using &lt;code&gt;sleep(5)&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;slow&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;n&#34;&gt;slow&amp;lt;/span&gt; &amp;lt;span class=&#34;mf&#34;&gt;5.00087594986&amp;lt;/span&gt;
&amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;slow&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;n&#34;&gt;slow&amp;lt;/span&gt; &amp;lt;span class=&#34;mf&#34;&gt;5.0011920929&amp;lt;/span&gt;
&amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;slow&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;n&#34;&gt;slow&amp;lt;/span&gt; &amp;lt;span class=&#34;mf&#34;&gt;5.00118708611&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The operating system’s high resolution timer shows that “5 seconds” can vary just a bit!&lt;/p&gt;

&lt;h1 id=&#34;use-case-stacking-multiple-decorators&#34;&gt;Use Case: Stacking Multiple Decorators&lt;/h1&gt;

&lt;p&gt;Multiple decorators can be applied to any function. Simply stack them like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;nd&#34;&gt;@decorator3&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;2&amp;lt;/span&gt; &amp;lt;span class=&#34;nd&#34;&gt;@decorator2&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;3&amp;lt;/span&gt; &amp;lt;span class=&#34;nd&#34;&gt;@decorator1&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;4&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;foo&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;():&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;5&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;pass&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is important to note that Python will apply the decorators from &lt;em&gt;innermost&lt;/em&gt; to &lt;em&gt;outermost&lt;/em&gt;. In our example above, &lt;code&gt;decorator1&lt;/code&gt; is executed first.&lt;/p&gt;

&lt;h1 id=&#34;standard-library-decorators&#34;&gt;Standard Library Decorators&lt;/h1&gt;

&lt;p&gt;The Python standard library has a number of built-in decorators, available anywhere.&lt;/p&gt;

&lt;h2 id=&#34;classmethod&#34;&gt;@classmethod&lt;/h2&gt;

&lt;p&gt;Class methods are bound to a class, but &lt;strong&gt;not&lt;/strong&gt; to a specific &lt;em&gt;instance&lt;/em&gt; of a class. For example:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;class&amp;lt;/span&gt; &amp;lt;span class=&#34;nc&#34;&gt;Circle&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;2&amp;lt;/span&gt;     &amp;lt;span class=&#34;n&#34;&gt;diameter&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;12&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;3&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt;4&amp;lt;/span&gt;     &amp;lt;span class=&#34;nd&#34;&gt;@classmethod&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;5&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;get_diameter&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;cls&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;6&amp;lt;/span&gt;         &amp;lt;span class=&#34;k&#34;&gt;return&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;cls&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;diameter&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the &lt;code&gt;Circle&lt;/code&gt; class above, notice the &lt;code&gt;diameter&lt;/code&gt; variable is a &lt;em&gt;class&lt;/em&gt; member. That is, it belongs to the class, not any particular instance. There is also no &lt;code&gt;self.&lt;/code&gt; prepended to &lt;code&gt;diameter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;classmethod&lt;/code&gt; decorator applies the same structure to a function. The &lt;code&gt;get_diameter&lt;/code&gt; function is a member of the &lt;code&gt;Circle&lt;/code&gt; class. Notice the first parameter is called &lt;code&gt;cls&lt;/code&gt;. This is an &lt;em&gt;implicit&lt;/em&gt; reference to the &lt;code&gt;Circle&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;We can call &lt;code&gt;get_diameter&lt;/code&gt; as follows:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;text&#34;&gt;&amp;gt;&amp;gt;&amp;gt; Circle.get_diameter()
12
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice we called &lt;code&gt;get_diameter&lt;/code&gt; &lt;em&gt;directly&lt;/em&gt; on the &lt;code&gt;Circle&lt;/code&gt; class, and not on an instance.&lt;/p&gt;

&lt;p&gt;We can create an &lt;em&gt;instance&lt;/em&gt; of &lt;code&gt;Circle&lt;/code&gt; and call &lt;code&gt;get_diameter&lt;/code&gt;, producing the same result:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;text&#34;&gt;&amp;gt;&amp;gt;&amp;gt; circle = Circle()
&amp;gt;&amp;gt;&amp;gt; circle.get_diameter()
12
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Using &lt;code&gt;classmethod&lt;/code&gt; also has the benefit of working with inheritance. All subclasses will be able to access the function decorated with &lt;code&gt;classmethod&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s an example of a class method being invoked by a subclass:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;class&amp;lt;/span&gt; &amp;lt;span class=&#34;nc&#34;&gt;Parent&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;2&amp;lt;/span&gt;     &amp;lt;span class=&#34;n&#34;&gt;member&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;s&#34;&gt;&#39;x&#39;&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;3&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt;4&amp;lt;/span&gt;     &amp;lt;span class=&#34;nd&#34;&gt;@classmethod&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;5&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;foo&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;cls&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;6&amp;lt;/span&gt;         &amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;cls&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;member&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;7&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt;8&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;class&amp;lt;/span&gt; &amp;lt;span class=&#34;nc&#34;&gt;Child&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;Parent&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;9&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;pass&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can call &lt;code&gt;foo&lt;/code&gt; directly from the &lt;code&gt;Child&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;text&#34;&gt;&amp;gt;&amp;gt;&amp;gt; Child.foo()
x
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&#34;staticmethod&#34;&gt;@staticmethod&lt;/h2&gt;

&lt;p&gt;Static methods in Python behave a bit differently than class methods, and are more similar to those found in Java or C++, for example. Unlike class methods. static methods have no knowledge of the class in which they are defined.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;class&amp;lt;/span&gt; &amp;lt;span class=&#34;nc&#34;&gt;Foo&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;2&amp;lt;/span&gt;     &amp;lt;span class=&#34;nd&#34;&gt;@staticmethod&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;3&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;bar&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;():&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;4&amp;lt;/span&gt;         &amp;lt;span class=&#34;k&#34;&gt;pass&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice that &lt;code&gt;bar&lt;/code&gt; has no &lt;code&gt;cls&lt;/code&gt; or &lt;code&gt;self&lt;/code&gt; arguments. Call static methods similarly to class methods:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Foo.bar()&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;property&#34;&gt;@property&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;property&lt;/code&gt; decorator can be used to control access to a variable. Applying this decorator gives a function &lt;code&gt;getter&lt;/code&gt;, &lt;code&gt;setter&lt;/code&gt;, and &lt;code&gt;deleter&lt;/code&gt; attributes. You can use just the &lt;code&gt;property&lt;/code&gt; decorator on its own:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;class&amp;lt;/span&gt; &amp;lt;span class=&#34;nc&#34;&gt;Foo&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;2&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;__init&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;3&amp;lt;/span&gt;         &amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;_bar&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;bp&#34;&gt;None&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;4&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt;5&amp;lt;/span&gt;     &amp;lt;span class=&#34;nd&#34;&gt;@property&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;6&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;bar&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;7&amp;lt;/span&gt;         &amp;lt;span class=&#34;k&#34;&gt;return&amp;lt;/span&gt; &amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;_bar&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This makes the &lt;code&gt;bar&lt;/code&gt; function act as if it were a property:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;text&#34;&gt;&amp;gt;&amp;gt;&amp;gt; f = Foo()
&amp;gt;&amp;gt;&amp;gt; f.bar = &#39;x&#39;
&amp;gt;&amp;gt;&amp;gt; f.bar
&#39;x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or you can enhance the &lt;code&gt;setter&lt;/code&gt; and &lt;code&gt;deleter&lt;/code&gt; behavior:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
  &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt; 1&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;class&amp;lt;/span&gt; &amp;lt;span class=&#34;nc&#34;&gt;Foo&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 2&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;__init&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 3&amp;lt;/span&gt;         &amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;_bar&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;bp&#34;&gt;None&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 4&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt; 5&amp;lt;/span&gt;     &amp;lt;span class=&#34;nd&#34;&gt;@property&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 6&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;bar&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 7&amp;lt;/span&gt;         &amp;lt;span class=&#34;k&#34;&gt;return&amp;lt;/span&gt; &amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;_bar&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 8&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt; 9&amp;lt;/span&gt;     &amp;lt;span class=&#34;nd&#34;&gt;@bar.setter&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;10&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;bar&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;value&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;11&amp;lt;/span&gt;         &amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;_bar&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;value&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;12&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt;13&amp;lt;/span&gt;     &amp;lt;span class=&#34;nd&#34;&gt;@bar.deleter&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;14&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;bar&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;15&amp;lt;/span&gt;         &amp;lt;span class=&#34;k&#34;&gt;del&amp;lt;/span&gt; &amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;_bar&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice the syntax of &lt;code&gt;setter&lt;/code&gt; and &lt;code&gt;deleter&lt;/code&gt; &amp;#8211; the decorator is prefixed with &lt;code&gt;bar.&lt;/code&gt;. This indicates that the decorator applies to the property &lt;code&gt;bar&lt;/code&gt;. Decorated functions can also have decorators!&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;We’ve seen how decorators can be used to augment behavior with minimal code changes. This approach has limitless uses. Please leave a comment below, and let me know how &lt;strong&gt;you&lt;/strong&gt; use decorators!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Python Generators</title>
      <link>http://www.markrichman.com:1313/intro-to-python-generators/</link>
      <pubDate>Mon, 11 Nov 2013 16:30:24 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/intro-to-python-generators/</guid>
      <description>&lt;article itemscope=&#34;&#34; itemtype=&#34;http://schema.org/BlogPosting&#34; itemprop=&#34;blogPost&#34;&gt; 

&lt;div class=&#34;headline-wrap&#34;&gt;
  &lt;h1 itemprop=&#34;name&#34;&gt;
    Introduction to Python Generators
  &lt;/h1&gt;
  
  &lt;h2&gt;
  &lt;/h2&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;!--/ .headline-wrap --&gt;

&lt;div class=&#34;article-wrap&#34; itemprop=&#34;text&#34;&gt;
  &lt;p&gt;
    This article is part two of my series on iterators and generators. If you haven’t read &lt;a href=&#34;http://www.markrichman.com/intro-to-python-iterators/&#34;&gt;part one&lt;/a&gt;, or if you aren’t experienced with iterators in Python, then please &lt;a href=&#34;http://www.markrichman.com/intro-to-python-iterators/&#34;&gt;start here&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;h1 id=&#34;what-are-generators&#34;&gt;
    What are Generators?
  &lt;/h1&gt;
  
  &lt;p&gt;
    Generators (introduced in &lt;a href=&#34;http://www.python.org/dev/peps/pep-0255/&#34;&gt;PEP 255&lt;/a&gt;) extend the concept of iterators. In essence, they are iterators with “intelligence”. A generator function is effectively the &lt;code&gt;next()&lt;/code&gt; iterator method, applied to get the next value in a sequence. Unlike regular functions, generators use the &lt;code&gt;yield&lt;/code&gt; keyword instead of &lt;code&gt;return&lt;/code&gt; and maintain state across multiple calls.
  &lt;/p&gt;
  
  &lt;p&gt;
    Generator functions also allow you to pause execution, saving state until you resume execution. Let’s look at a simple example:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt; 1&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;gen&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;():&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 2&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;...&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;yield&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 3&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;...&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;yield&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;2&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 4&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;...&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;yield&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;3&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 5&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;...&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt; 6&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;for&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;i&amp;lt;/span&gt; &amp;lt;span class=&#34;ow&#34;&gt;in&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;gen&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;():&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;i&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 7&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;...&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt; 8&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 9&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;2&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;10&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;3&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    If you instantiate the generator function, you can see that a generator object is returned:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;gen&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;2&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;3&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;generator&amp;lt;/span&gt; &amp;lt;span class=&#34;nb&#34;&gt;object&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;gen&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;at&amp;lt;/span&gt; &amp;lt;span class=&#34;mh&#34;&gt;0x10d345050&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;4&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    Because generators &lt;strong&gt;implement&lt;/strong&gt; the iterator interface, you can repeatedly call &lt;code&gt;next()&lt;/code&gt; on &lt;code&gt;g&lt;/code&gt; to fetch each value emitted by the successive &lt;code&gt;yield&lt;/code&gt; calls:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt; 1&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 2&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 3&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 4&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;2&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 5&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 6&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;3&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 7&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 8&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;Traceback&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;most&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;recent&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;call&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;last&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 9&amp;lt;/span&gt;   &amp;lt;span class=&#34;n&#34;&gt;File&amp;lt;/span&gt; &amp;lt;span class=&#34;s&#34;&gt;&#34;&amp;lt;stdin&amp;gt;&#34;&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;line&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;ow&#34;&gt;in&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;module&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;10&amp;lt;/span&gt; &amp;lt;span class=&#34;ne&#34;&gt;StopIteration&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    It is important to note that instantiating a generator &lt;strong&gt;does not&lt;/strong&gt; execute the body of the function. Only upon a call to &lt;code&gt;next()&lt;/code&gt; (either explicit or implicit) will the generator execute. Each execution returns the next &lt;code&gt;yield&lt;/code&gt; and freezes.
  &lt;/p&gt;
  
  &lt;p&gt;
    Let’s rewrite the Fibonacci series function from the previous article as a generator:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt; 1&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;fib&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;():&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 2&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;...&amp;lt;/span&gt;     &amp;lt;span class=&#34;n&#34;&gt;x&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;0&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 3&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;...&amp;lt;/span&gt;     &amp;lt;span class=&#34;n&#34;&gt;y&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 4&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;...&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;while&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 5&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;...&amp;lt;/span&gt;         &amp;lt;span class=&#34;n&#34;&gt;x&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;y&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;y&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;x&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;+&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;y&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 6&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;...&amp;lt;/span&gt;         &amp;lt;span class=&#34;k&#34;&gt;yield&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;x&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 7&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;...&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt; 8&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;fib&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 9&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;10&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;11&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;12&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;13&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;14&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;2&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;15&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;16&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;3&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;17&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;18&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;5&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;19&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;20&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;8&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;21&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;22&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;13&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;23&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    You can see that this generator will work for an any size list:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt; 1&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;fib&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 2&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;for&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;i&amp;lt;/span&gt; &amp;lt;span class=&#34;ow&#34;&gt;in&amp;lt;/span&gt; &amp;lt;span class=&#34;nb&#34;&gt;range&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;8&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 3&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;...&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt; 4&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 5&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 6&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;2&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 7&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;3&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 8&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;5&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 9&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;8&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;10&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;13&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;11&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;21&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;12&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;h1 id=&#34;use-the-schwartz&#34;&gt;
    Use the Schwartz
  &lt;/h1&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.linkedin.com/pub/philip-schwartz/a/126/a18&#34;&gt;Phil&lt;/a&gt; challenged me with a generator problem he uses on technical interviews. Here’s the problem:
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      You have a stream of values that need to be read from a text file. Each line of text contains an integer. The stream is too large to fit in memory all at once. Write a generator to process the stream of values and calculate their sum. Do not use the form of &lt;code&gt;with open(filename) as f:&lt;/code&gt; in your solution.
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    Let’s assume the file &lt;code&gt;data.txt&lt;/code&gt; list each integer from 1 through 99,999 as such:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;text&#34;&gt;1
2
3
4
5
...
99999
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    We can define a generator function that accepts an arbitrary filename, and &lt;code&gt;yield&lt;/code&gt;s each line individually:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;In&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;]:&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;values&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;filename&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;2&amp;lt;/span&gt;    &amp;lt;span class=&#34;o&#34;&gt;...&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt;     &amp;lt;span class=&#34;n&#34;&gt;f&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;nb&#34;&gt;open&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;filename&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;s&#34;&gt;&#39;r&#39;&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;3&amp;lt;/span&gt;    &amp;lt;span class=&#34;o&#34;&gt;...&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;for&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;line&amp;lt;/span&gt; &amp;lt;span class=&#34;ow&#34;&gt;in&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;f&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;4&amp;lt;/span&gt;    &amp;lt;span class=&#34;o&#34;&gt;...&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt;         &amp;lt;span class=&#34;k&#34;&gt;yield&amp;lt;/span&gt; &amp;lt;span class=&#34;nb&#34;&gt;int&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;line&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;5&amp;lt;/span&gt;    &amp;lt;span class=&#34;o&#34;&gt;...&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt;         
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    Next, we accumulate the sum from the file &lt;code&gt;data.txt&lt;/code&gt;:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;In&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;2&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;]:&amp;lt;/span&gt; &amp;lt;span class=&#34;nb&#34;&gt;sum&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;0&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;2&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt;3&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;In&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;3&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;]:&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;for&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;x&amp;lt;/span&gt; &amp;lt;span class=&#34;ow&#34;&gt;in&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;values&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;s&#34;&gt;&#39;data.txt&#39;&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;4&amp;lt;/span&gt;    &amp;lt;span class=&#34;o&#34;&gt;...&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt;     &amp;lt;span class=&#34;nb&#34;&gt;sum&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;+=&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;x&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;5&amp;lt;/span&gt;    &amp;lt;span class=&#34;o&#34;&gt;...&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt;     
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    And finally, print the sum:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;In&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;4&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;]:&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;nb&#34;&gt;sum&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;2&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;4999950000&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    The power of generators here is that a constant amount of memory is utilized, no matter how large the data set.
  &lt;/p&gt;
  
  &lt;p&gt;
    Consider a more complex example, where we want to read a binary file of arbitrary size in chunks, and operate on those chunks:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;read_in_chunks&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;file_object&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;chunk_size&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;2048&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;2&amp;lt;/span&gt;     &amp;lt;span class=&#34;sd&#34;&gt;&#34;&#34;&#34;Generator to read a file one chunk at a time.&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;3&amp;lt;/span&gt; &amp;lt;span class=&#34;sd&#34;&gt;    Default chunk size: 2KB&#34;&#34;&#34;&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;4&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;while&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;5&amp;lt;/span&gt;         &amp;lt;span class=&#34;n&#34;&gt;data&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;file_object&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;read&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;chunk_size&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;s&#34;&gt;&#39;rb&#39;&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;6&amp;lt;/span&gt;         &amp;lt;span class=&#34;k&#34;&gt;if&amp;lt;/span&gt; &amp;lt;span class=&#34;ow&#34;&gt;not&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;data&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;7&amp;lt;/span&gt;             &amp;lt;span class=&#34;k&#34;&gt;break&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;8&amp;lt;/span&gt;         &amp;lt;span class=&#34;k&#34;&gt;yield&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;data&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    The implementation of &lt;code&gt;process_data()&lt;/code&gt; is completely arbitrary &amp;#8211; it could send bytes over a socket connection, for example. Now we can call &lt;code&gt;process_data()&lt;/code&gt; on each of these chunks.
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;f&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;nb&#34;&gt;open&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;s&#34;&gt;&#39;alottadata.dat&#39;&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;2&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;for&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;chunk&amp;lt;/span&gt; &amp;lt;span class=&#34;ow&#34;&gt;in&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;read_in_chunks&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;f&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;3&amp;lt;/span&gt;     &amp;lt;span class=&#34;n&#34;&gt;process_data&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;chunk&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;h1 id=&#34;generator-expressions&#34;&gt;
    Generator Expressions
  &lt;/h1&gt;
  
  &lt;p&gt;
    If you’re familiar with &lt;a href=&#34;http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions&#34;&gt;list comprehensions&lt;/a&gt;, then you already know how to use generator expressions! If not, please take a few minutes to &lt;a href=&#34;http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions&#34;&gt;read up&lt;/a&gt;. A generator expression represents a sequence of results without turning it into a concrete list.
  &lt;/p&gt;
  
  &lt;p&gt;
    Here is a familiar list comprehension:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;In&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;]:&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;x&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;for&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;x&amp;lt;/span&gt; &amp;lt;span class=&#34;ow&#34;&gt;in&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;2&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;3&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)]&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;2&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;Out&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;]:&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;2&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;3&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;]&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    We can rewrite this as a generator expression with one simple syntactic change:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;In&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;]:&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;x&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;for&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;x&amp;lt;/span&gt; &amp;lt;span class=&#34;ow&#34;&gt;in&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;2&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;3&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;))&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;2&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;Out&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;]:&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;generator&amp;lt;/span&gt; &amp;lt;span class=&#34;nb&#34;&gt;object&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;genexpr&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;at&amp;lt;/span&gt; &amp;lt;span class=&#34;mh&#34;&gt;0x10351bf50&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    Now, we can iterate as expected:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt; 1&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;In&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;2&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;]:&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 2&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;Out&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;2&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;]:&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 3&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt; 4&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;In&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;3&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;]:&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 5&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;Out&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;3&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;]:&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;2&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 6&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt; 7&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;In&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;4&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;]:&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 8&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;Out&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;4&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;]:&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;3&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 9&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt;10&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;In&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;5&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;]:&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;11&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;---------------------------------------------------------------------------&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;12&amp;lt;/span&gt; &amp;lt;span class=&#34;ne&#34;&gt;StopIteration&amp;lt;/span&gt;                             &amp;lt;span class=&#34;n&#34;&gt;Traceback&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;most&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;recent&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;call&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;last&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;13&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;ipython&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;-&amp;lt;/span&gt;&amp;lt;span class=&#34;nb&#34;&gt;input&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;-&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;16&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;-&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;d7e53364a9a7&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;ow&#34;&gt;in&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;module&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;14&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;----&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;g&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;()&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;15&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt;16&amp;lt;/span&gt; &amp;lt;span class=&#34;ne&#34;&gt;StopIteration&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    Generator expressions can be use in place of generator functions. For example:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt;1&amp;lt;/span&gt; &amp;lt;span class=&#34;nb&#34;&gt;sum&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;x&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;**&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;2&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;for&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;x&amp;lt;/span&gt; &amp;lt;span class=&#34;ow&#34;&gt;in&amp;lt;/span&gt; &amp;lt;span class=&#34;nb&#34;&gt;range&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;11&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;))&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    This calls the built-in function &lt;code&gt;sum()&lt;/code&gt; with as its argument a generator expression that yields the squares of the numbers from 1 through 10 inclusive. The &lt;code&gt;sum()&lt;/code&gt; function adds up the values in its argument resulting in an answer of 385. The advantage over &lt;code&gt;sum([x**2 for x in range(1, 11)])&lt;/code&gt; should be obvious. The latter creates a list containing all the squares, which is then iterated over &lt;strong&gt;once&lt;/strong&gt; before it is thrown away. For large collections, these savings in memory usage are an important consideration.
  &lt;/p&gt;
  
  &lt;h1 id=&#34;conclusion&#34;&gt;
    Conclusion
  &lt;/h1&gt;
  
  &lt;p&gt;
    You can see how generators can be used for &lt;em&gt;lazy evaluation&lt;/em&gt; and for calculating large sets of results. Use generators to minimize memory allocation, and allows the caller to get started processing the first few values immediately. In short, a generator looks like a function but behaves like an iterator.
  &lt;/p&gt;
  
  &lt;p&gt;
    Please read on to &lt;a href=&#34;http://www.markrichman.com/intro-to-python-decorators/&#34;&gt;Introduction to Python Decorators&lt;/a&gt;.
  &lt;/p&gt;&lt;/article&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Python Iterators</title>
      <link>http://www.markrichman.com:1313/intro-to-python-iterators/</link>
      <pubDate>Sun, 10 Nov 2013 16:24:07 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/intro-to-python-iterators/</guid>
      <description>&lt;article itemprop=&#34;blogPost&#34; itemscope=&#34;&#34; itemtype=&#34;http://schema.org/BlogPosting&#34;&gt; 

&lt;div class=&#34;headline-wrap&#34;&gt;
  &lt;h1 itemprop=&#34;name&#34;&gt;
    Introduction to Python Iterators
  &lt;/h1&gt;
  
  &lt;h2&gt;
  &lt;/h2&gt;
&lt;/div&gt;

&lt;!--/ .headline-wrap --&gt;

&lt;div class=&#34;article-wrap&#34; itemprop=&#34;text&#34;&gt;
  &lt;p&gt;
    While at our monthly South Florida Python meetup (which has exactly two members, &lt;a href=&#34;http://www.linkedin.com/pub/philip-schwartz/a/126/a18&#34;&gt;Philip Schwartz&lt;/a&gt; and myself), the topic of iterators and generators came up. These are two core idioms in Python, and are even more ubiquitous in Python 3. However, they are often poorly understood. This introduction will be part one of a series on Python iterators and generators.
  &lt;/p&gt;
  
  &lt;p&gt;
    An iterator is an object that allows you to traverse a sequence of data such as a list, dictionary, or tuple, for example. It also works with files.
  &lt;/p&gt;
  
  &lt;p&gt;
    Let’s see how iterators work.
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;n&#34;&gt;numbers&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;2&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;3&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;4&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;5&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;]&amp;lt;/span&gt;
&amp;lt;span class=&#34;k&#34;&gt;for&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;number&amp;lt;/span&gt; &amp;lt;span class=&#34;ow&#34;&gt;in&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;numbers&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt;
    &amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;number&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    While the for loop is controlling the iterations, the iterator itself is controlling the traversal of the list.
  &lt;/p&gt;
  
  &lt;h2 id=&#34;creating-an-iterator&#34;&gt;
    Creating an Iterator
  &lt;/h2&gt;
  
  &lt;p&gt;
    Create a simple list object:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;n&#34;&gt;numbers&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;2&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;3&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;]&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    to create an &lt;em&gt;explicit&lt;/em&gt; iterator, we create a variable and call &lt;code&gt;iter()&lt;/code&gt; on the list
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;n&#34;&gt;it&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;nb&#34;&gt;iter&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;numbers&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    We now have a &lt;code&gt;it&lt;/code&gt; tied to the iterator of the &lt;code&gt;numbers&lt;/code&gt; list.
  &lt;/p&gt;
  
  &lt;p&gt;
    Iterators follow a &lt;a href=&#34;http://docs.python.org/2/library/stdtypes.html?highlight=__iter__#container.__iter__&#34;&gt;protocol&lt;/a&gt; based on two methods: &lt;code&gt;__iter__()&lt;/code&gt; and &lt;code&gt;next()&lt;/code&gt;. Internally, calling &lt;code&gt;X.__iter__()&lt;/code&gt; is equivalent to calling &lt;code&gt;iter(X)&lt;/code&gt;. To access the first element of the list, use the &lt;code&gt;next()&lt;/code&gt; function:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;it&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;())&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    &lt;em&gt;Note: If you are using Python 3, iterators will use &lt;code&gt;X.__next__()&lt;/code&gt; instead of &lt;code&gt;X.next()&lt;/code&gt;.&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    This is somewhat awkward, so we can use the &lt;code&gt;next(X)&lt;/code&gt; function on the iterator itself:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;nb&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;it&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;))&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    The &lt;code&gt;next(X)&lt;/code&gt; function is not only simpler, it is version-neutral, remaing compatible between Python 2.x and 3.x.
  &lt;/p&gt;
  
  &lt;p&gt;
    Move through the list by repeatedly calling &lt;code&gt;next(it)&lt;/code&gt;. If you try to iterate past the end of the list, you’ll get a &lt;a href=&#34;http://docs.python.org/2/library/exceptions.html#exceptions.StopIteration&#34;&gt;&lt;code&gt;StopIteration&lt;/code&gt;&lt;/a&gt; exception. The implicit iterators, such as the for loop, are implemented to stop before the &lt;a href=&#34;http://docs.python.org/2/library/exceptions.html#exceptions.StopIteration&#34;&gt;&lt;code&gt;StopIteration&lt;/code&gt;&lt;/a&gt; exception is thrown.
  &lt;/p&gt;
  
  &lt;p&gt;
    Files are handled the same way as lists. In this case, the file object itself is an iterator:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;n&#34;&gt;fit&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;nb&#34;&gt;open&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;s&#34;&gt;&#39;data.txt&#39;&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;s&#34;&gt;&#39;r&#39;&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;nb&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;fit&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;))&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    This prints the first line of data.txt. Because a file object is an iterator, we can call &lt;code&gt;next()&lt;/code&gt; on it.
  &lt;/p&gt;
  
  &lt;h2 id=&#34;iterators-and-dictionaries&#34;&gt;
    Iterators and Dictionaries
  &lt;/h2&gt;
  
  &lt;p&gt;
    If you’re coming from another procedural programming language, you might iterate over a dictionary (or hash) as follows:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;n&#34;&gt;ages&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;{&amp;lt;/span&gt;&amp;lt;span class=&#34;s&#34;&gt;&#39;Mark&#39;&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;40&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;s&#34;&gt;&#39;Phil&#39;&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;30&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;s&#34;&gt;&#39;Bob&#39;&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;65&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;}&amp;lt;/span&gt;
&amp;lt;span class=&#34;k&#34;&gt;for&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;key&amp;lt;/span&gt; &amp;lt;span class=&#34;ow&#34;&gt;in&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;ages&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;keys&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;():&amp;lt;/span&gt;
    &amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;key&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;ages&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;key&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;])&amp;lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    This will print the key (name) and value (age) for each pair in the dictionary. You will see in a minute that Python has a more elegant and intuitive approach than the loop-over-index implementation above.
  &lt;/p&gt;
  
  &lt;p&gt;
    So, how does this work, since dictionaries are more complex than lists? Let’s create an iterator over the dictionary and see:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;n&#34;&gt;it&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;nb&#34;&gt;iter&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;ages&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;nb&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;it&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;))&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    This prints the first key. Note that subsequent calls to &lt;code&gt;next()&lt;/code&gt; will not necessarily return the keys in the order in which they were defined. This is because dictionaries are inherently unsorted.
  &lt;/p&gt;
  
  &lt;p&gt;
    Having an iterator for a dictionary now allows you to simplify the previous for loop:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;k&#34;&gt;for&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;key&amp;lt;/span&gt; &amp;lt;span class=&#34;ow&#34;&gt;in&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;ages&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt;
    &amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;key&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;ages&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;[&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;key&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;])&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;h2 id=&#34;other-iterators&#34;&gt;
    Other Iterators
  &lt;/h2&gt;
  
  &lt;p&gt;
    Iterators work with various Python datatypes. For example, with &lt;code&gt;range&lt;/code&gt;:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;n&#34;&gt;numbers&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;nb&#34;&gt;range&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;10&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;n&#34;&gt;it&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;nb&#34;&gt;iter&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;numbers&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;nb&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;it&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;))&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    Same pattern as before with lists or dictionaries
  &lt;/p&gt;
  
  &lt;p&gt;
    What about more complicated data sources? Let’s look at the filesystem, for example:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;kn&#34;&gt;import&amp;lt;/span&gt; &amp;lt;span class=&#34;nn&#34;&gt;os&amp;lt;/span&gt;

&amp;lt;span class=&#34;n&#34;&gt;files&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;os&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;popen&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;s&#34;&gt;&#39;ls *.py&#39;&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;n&#34;&gt;fit&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;nb&#34;&gt;iter&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;files&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;nb&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;fit&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;))&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    This will print the first filename, ending in .py, in the current directory. Again, this is the same pattern shown previously, and we can apply a for loop to the iterator:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;kn&#34;&gt;import&amp;lt;/span&gt; &amp;lt;span class=&#34;nn&#34;&gt;os&amp;lt;/span&gt;

&amp;lt;span class=&#34;n&#34;&gt;files&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;os&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;popen&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;s&#34;&gt;&#39;ls *.py&#39;&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;k&#34;&gt;for&amp;lt;/span&gt; &amp;lt;span class=&#34;nb&#34;&gt;file&amp;lt;/span&gt; &amp;lt;span class=&#34;ow&#34;&gt;in&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;files&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt;
    &amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;nb&#34;&gt;file&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    To be even more terse, we can do this:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;kn&#34;&gt;import&amp;lt;/span&gt; &amp;lt;span class=&#34;nn&#34;&gt;os&amp;lt;/span&gt;

&amp;lt;span class=&#34;k&#34;&gt;for&amp;lt;/span&gt; &amp;lt;span class=&#34;nb&#34;&gt;file&amp;lt;/span&gt; &amp;lt;span class=&#34;ow&#34;&gt;in&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;os&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;popen&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;s&#34;&gt;&#39;ls *.py&#39;&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
    &amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;nb&#34;&gt;file&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    Iterators also work with tuples. Let’s do something a bit more interesting than just a sequence of single values. We can define a square by its points’ cartesian coordinates:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;n&#34;&gt;square&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;((&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;10&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;8&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;),&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;10&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;23&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;),&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;25&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;23&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;),&amp;lt;/span&gt; &amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;25&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;8&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;))&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    We can use an iterator on square to retrieve these four coordinate values:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;n&#34;&gt;sit&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;nb&#34;&gt;iter&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;square&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;nb&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;sit&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;))&amp;lt;/span&gt;
&amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;nb&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;sit&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;))&amp;lt;/span&gt;
&amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;nb&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;sit&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;))&amp;lt;/span&gt;
&amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;nb&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;sit&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;))&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    You can probably guess by now that this can be done more easily with a for loop:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;k&#34;&gt;for&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;point&amp;lt;/span&gt; &amp;lt;span class=&#34;ow&#34;&gt;in&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;square&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt;
    &amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;point&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;h2 id=&#34;custom-iterators&#34;&gt;
    Custom Iterators
  &lt;/h2&gt;
  
  &lt;p&gt;
    Iterators are not limited to native Python datatypes. You can create iterators for your own custom classes as well. Simply follow the protocol explained earlier, implmenting &lt;code&gt;__iter__()&lt;/code&gt; and &lt;code&gt;next()&lt;/code&gt; (or &lt;code&gt;__next__()&lt;/code&gt; in Python 3.x).
  &lt;/p&gt;
  
  &lt;p&gt;
    For example, we can create an iterator for a class that encapulates the &lt;a href=&#34;http://en.wikipedia.org/wiki/Fibonacci_number&#34;&gt;Fibonacci series&lt;/a&gt;:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;lineno&#34;&gt; 1&amp;lt;/span&gt; &amp;lt;span class=&#34;k&#34;&gt;class&amp;lt;/span&gt; &amp;lt;span class=&#34;nc&#34;&gt;Fib&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;nb&#34;&gt;object&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 2&amp;lt;/span&gt;     &amp;lt;span class=&#34;sd&#34;&gt;&#39;&#39;&#39;iterator that yields numbers in the Fibonacci series&#39;&#39;&#39;&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 3&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt; 4&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;__init__&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;nb&#34;&gt;max&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 5&amp;lt;/span&gt;         &amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;max&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;nb&#34;&gt;max&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 6&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt; 7&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;__iter__&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 8&amp;lt;/span&gt;         &amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;a&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;0&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt; 9&amp;lt;/span&gt;         &amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;b&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;mi&#34;&gt;1&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;10&amp;lt;/span&gt;         &amp;lt;span class=&#34;k&#34;&gt;return&amp;lt;/span&gt; &amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;11&amp;lt;/span&gt; 
&amp;lt;span class=&#34;lineno&#34;&gt;12&amp;lt;/span&gt;     &amp;lt;span class=&#34;k&#34;&gt;def&amp;lt;/span&gt; &amp;lt;span class=&#34;nf&#34;&gt;next&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;  &amp;lt;span class=&#34;c&#34;&gt;# This will be __next__(self) in Python 3.x&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;13&amp;lt;/span&gt;         &amp;lt;span class=&#34;n&#34;&gt;fib&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;a&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;14&amp;lt;/span&gt;         &amp;lt;span class=&#34;k&#34;&gt;if&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;fib&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;lt;/span&gt; &amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;max&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;:&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;15&amp;lt;/span&gt;             &amp;lt;span class=&#34;k&#34;&gt;raise&amp;lt;/span&gt; &amp;lt;span class=&#34;ne&#34;&gt;StopIteration&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;16&amp;lt;/span&gt;         &amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;a&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;b&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;=&amp;lt;/span&gt; &amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;b&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;,&amp;lt;/span&gt; &amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;a&amp;lt;/span&gt; &amp;lt;span class=&#34;o&#34;&gt;+&amp;lt;/span&gt; &amp;lt;span class=&#34;bp&#34;&gt;self&amp;lt;/span&gt;&amp;lt;span class=&#34;o&#34;&gt;.&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;b&amp;lt;/span&gt;
&amp;lt;span class=&#34;lineno&#34;&gt;17&amp;lt;/span&gt;         &amp;lt;span class=&#34;k&#34;&gt;return&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;fib&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    Now, we can print the first &lt;em&gt;n&lt;/em&gt; elements of the series:
  &lt;/p&gt;
  
  &lt;div class=&#34;highlight&#34;&gt;
    &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;lt;span class=&#34;k&#34;&gt;for&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;fib&amp;lt;/span&gt; &amp;lt;span class=&#34;ow&#34;&gt;in&amp;lt;/span&gt; &amp;lt;span class=&#34;n&#34;&gt;Fib&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;mi&#34;&gt;10&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;):&amp;lt;/span&gt;
    &amp;lt;span class=&#34;k&#34;&gt;print&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;(&amp;lt;/span&gt;&amp;lt;span class=&#34;n&#34;&gt;fib&amp;lt;/span&gt;&amp;lt;span class=&#34;p&#34;&gt;)&amp;lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  
  &lt;p&gt;
    Cool, huh?! Now, onto &lt;a href=&#34;http://www.markrichman.com/intro-to-python-generators/&#34;&gt;generators&lt;/a&gt;…
  &lt;/p&gt;
&lt;/div&gt;

&lt;!-- /.article-wrap --&gt;&lt;/article&gt;
</description>
    </item>
    
  </channel>
</rss>