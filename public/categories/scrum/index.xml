<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scrum on Mark Richman Consulting</title>
    <link>http://www.markrichman.com:1313/categories/scrum/</link>
    <description>Recent content in Scrum on Mark Richman Consulting</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Dec 2015 16:41:48 +0000</lastBuildDate>
    <atom:link href="http://www.markrichman.com:1313/categories/scrum/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Gunfighting and IT Service Delivery</title>
      <link>http://www.markrichman.com:1313/gunfighting-and-it-service-delivery/</link>
      <pubDate>Mon, 14 Dec 2015 16:41:48 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/gunfighting-and-it-service-delivery/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;size-medium wp-image-893 alignleft&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2015/12/eastwood-300x165.png&#34; alt=&#34;eastwood&#34; width=&#34;300&#34; height=&#34;165&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2015/12/eastwood-300x165.png 300w, http://www.markrichman.com/wp-content/uploads/2015/12/eastwood-768x421.png 768w, http://www.markrichman.com/wp-content/uploads/2015/12/eastwood-1024x562.png 1024w, http://www.markrichman.com/wp-content/uploads/2015/12/eastwood.png 1485w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;I&amp;#8217;ve been a sport shooting enthusiast for about 15 years. In that time, I&amp;#8217;ve found the most difficult skill to master is &lt;strong&gt;speed vs. accuracy&lt;/strong&gt;. In a fight for one&amp;#8217;s life, this skill becomes vital &amp;#8211; hitting the right target before you exhaust your ammunition. This same balance applies to IT service delivery.&lt;/p&gt;

&lt;p&gt;In my consulting work, I&amp;#8217;ve observed clients who have only one speed. Some clients can only deliver quickly, others slowly. Both extremes are dangerous. Whichever speed it is, it will only be optimal for a narrow range of projects. Learning to adapt and adjust speed is critical for success &amp;#8211; that is, hitting the right target at the right speed.&lt;/p&gt;

&lt;p&gt;How do we know how fast to go?&lt;/p&gt;

&lt;p&gt;Back to my gunfighting analogy &amp;#8211; as the distance to your target increases, so do your chances of missing. Counterintuitively, sometimes you have to speed up to gain accuracy, closing the distance to your target.&lt;/p&gt;

&lt;p&gt;What does this have to do with IT service delivery?&lt;/p&gt;

&lt;p&gt;Glad you asked. I&amp;#8217;ve had clients work at both speed extremes. Too quickly, and requirements are missed, bugs abound, and expensive rework is incurred. As a result, important features get dropped to make a delivery date, or worse, dates are missed. Too slowly, and (obviously) dates are missed, but more importantly, competitors can leapfrog you.&lt;/p&gt;

&lt;p&gt;But you just said to speed up to gain accuracy. Mark, you&amp;#8217;re pulling my leg!&lt;/p&gt;

&lt;p&gt;Nope. I promise. What I mean by &amp;#8220;speed&amp;#8221; here is not necessarily how quickly you can deliver, but how &lt;strong&gt;frequently&lt;/strong&gt; you can deliver.&lt;/p&gt;

&lt;p&gt;Frequency, by way of iteration, allows us to deliver just the right solution at the right time, and no more. Delivering with shorter iterations reduces the distance to our target, and allows us to quickly adapt based on customer demand, market forces, or to take advantage of new technologies. Iterating also allows us to minimize the amount of waste produced by rework.&lt;/p&gt;

&lt;p&gt;Mark, how fast can I go?&lt;/p&gt;

&lt;p&gt;I don&amp;#8217;t know. You don&amp;#8217;t know. But we can find out. After adopting some agile practices, we can measure our velocity &amp;#8211; the amount of value we can deliver per iteration.&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;re anything like my clients, you&amp;#8217;ll be surprised to learn how much faster and straighter you can shoot.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Speed and the High Cost of Rework</title>
      <link>http://www.markrichman.com:1313/speed-and-the-high-cost-of-rework/</link>
      <pubDate>Tue, 01 Dec 2015 03:18:54 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/speed-and-the-high-cost-of-rework/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;size-medium wp-image-864 alignleft&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2015/11/Cost-down-300x200.jpg&#34; alt=&#34;increased quality - speed - efficiency&#34; width=&#34;300&#34; height=&#34;200&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2015/11/Cost-down-300x200.jpg 300w, http://www.markrichman.com/wp-content/uploads/2015/11/Cost-down.jpg 424w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;One of my best clients initially contacted me because they simply wanted to get faster at what they do. They needed to deliver more value to their customers more often, and at lower cost. However, they just couldn&amp;#8217;t seem to improve. When I paid them a visit, I looked at their product development lifecycle as a whole. Their product roadmap was solid, their requirements specifications and test plans were clear, the team had all the right skills, and their quality was high. So what could be improved?&lt;/p&gt;

&lt;p&gt;This company thought they were doing all the right things. Then I interviewed the software team, and the truth came out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rework was killing them&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unbeknownst to senior management, product managers were frequently changing requirements after the original specifications were implemented and tested. I discovered that it was common for a couple of their product managers to ask their buddies on the development team to just go ahead and add this &lt;em&gt;one little thing&lt;/em&gt; as a favor. No big deal, right? They would add them, then these little changes would break 5 other things. Then 5 new bugs were opened, 5 fixes, 5 retests, and everything works again. At the end of the day, everything was working fine and someone got their pet feature added. Senior management was none the wiser.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s the problem: all that rework has a cost. You may think that because everyone is on salary that these off-book changes were &amp;#8220;free.&amp;#8221; &lt;strong&gt;You&amp;#8217;d be wrong.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consider opportunity cost&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All that time spent on sneaking in changes and fixing the fixes adds up. Time that could have been better spent on higher value features. I calculated that my client was losing around &lt;strong&gt;$340,000/year&lt;/strong&gt; to this unplanned rework! This obviously had to stop. What more could &lt;strong&gt;you&lt;/strong&gt; do with that kind of savings?&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s what we changed&amp;#8230;&lt;/p&gt;

&lt;p&gt;We introduced agile practices to the software development processes. This approach enables the incremental delivery of products, instead of one &amp;#8220;big bang&amp;#8221; at the end. Incremental delivery allows us to inspect and adapt to changing requirements &amp;#8211; with complete transparency.&lt;/p&gt;

&lt;p&gt;In order to deliver a product incrementally, we break down requirements into user stories, prioritize them in a backlog, and continuously implement, test, and release.&lt;/p&gt;

&lt;p&gt;Working in this manner &lt;strong&gt;minimizes rework&lt;/strong&gt;, isolating it to either small bug fixes, or refining the user stories in the current iteration. We can now inspect and adapt, consistently creating value instead of creating waste.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My client&amp;#8217;s organization is still adjusting to working iteratively &amp;#8211; the agile way. This is normal. But the payoff is immediate &amp;#8211; rework is negligible, and customers get to enjoy new features sooner. That translates to not only cost savings, but a much shorter path to new revenue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My Challenge for You&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Consider the following questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How much productivity in your organization is lost to rework? How would you know?&lt;/li&gt;
&lt;li&gt;Can you deliver a product incrementally? How frequently?&lt;/li&gt;
&lt;li&gt;What can you do right now to go faster, with higher quality, and at lower cost?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Need help answering these questions? &lt;a href=&#34;http://www.markrichman.com/contact/&#34;&gt;Give me a call&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;© 2015 Mark Richman. All Rights Reserved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Fail Fast and Succeed</title>
      <link>http://www.markrichman.com:1313/how-to-fail-fast-and-succeed/</link>
      <pubDate>Mon, 23 Nov 2015 18:25:50 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/how-to-fail-fast-and-succeed/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.markrichman.com/wp-content/uploads/2015/11/fail.jpg&#34;&gt;&lt;img class=&#34;size-medium wp-image-852 alignleft&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2015/11/fail-300x225.jpg&#34; alt=&#34;fail&#34; width=&#34;300&#34; height=&#34;225&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2015/11/fail-300x225.jpg 300w, http://www.markrichman.com/wp-content/uploads/2015/11/fail-1024x768.jpg 1024w, http://www.markrichman.com/wp-content/uploads/2015/11/fail.jpg 1600w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;With the end of the year fast approaching, my clients are now focusing like a laser what they would like to accomplish in 2016. Many are finalizing their technology strategy, investing in DevOps practices and tools, committing to Agile transformation, and leveraging the Cloud. All these efforts enable my clients to do two things they couldn&amp;#8217;t before: &lt;strong&gt;fail fast and pivot&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What do we mean by fail fast?&lt;/p&gt;

&lt;p&gt;When developing new solutions with my clients, we embrace a feedback loop. That is, quickly get something in front of customers, solicit feedback, inspect and adapt, and then decide how to proceed. Most often, we make changes to the product based on customer feedback, but sometimes we terminate a bad idea before more money is spent.&lt;/p&gt;

&lt;p&gt;Here, the concept of failure takes on new meaning. With previous non-agile processes, you would create a product over a long period of time and bring it to market fully baked. Then, the market would determine if what you created has value, meets needs, or just plain stinks. Time and money have been needlessly squandered.&lt;/p&gt;

&lt;p&gt;There is a better way&lt;/p&gt;

&lt;p&gt;I work with clients to &lt;strong&gt;redefine failure&lt;/strong&gt; as simply an iterative test of assumptions. We embrace the inevitable imperfections in our product, and &lt;strong&gt;pivot&lt;/strong&gt; to meet the market need. We do this early and often.&lt;/p&gt;

&lt;p&gt;Thomas Edison once said of his mistakes, &amp;#8220;I have not failed 10,000 times. I have not failed once. I have succeeded in proving that those 10,000 ways will not work. When I have eliminated the ways that will not work, I will find the way that will work.&amp;#8221;&lt;/p&gt;

&lt;p&gt;Being agile means your product is never done. I&amp;#8217;ve seen countless companies play roulette with ambitious products and initiatives. These efforts either fail to see the light of day, or once launched, crash and burn in the marketplace. Money, morale, and shareholder value go down the toilet.&lt;/p&gt;

&lt;p&gt;Working this way also allows us to more easily establish cause and effect. Perhaps a product performs poorly in the market because of a usability or design flaw. Maybe it&amp;#8217;s pricing. Or performance. If we make too many changes over too long a period of time, the distance between cause and effect prevents us from responding quickly to feedback. ​&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save Money While Making Money&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the late 90s and for a while after, I worked for a number of dot-com bubble startups. Absurd valuations, nebulous business models, and venture capital speculation were the name of the game. Companies used other people&amp;#8217;s money to produce products of questionable value, usually without profit. It was clearly unsustainable, which is why nearly all of those companies are gone now.&lt;/p&gt;

&lt;p&gt;Today, business owners, executives, investors, and shareholders want to see dividends early and often.&lt;/p&gt;

&lt;p&gt;Producing a product iteratively allows us to get revenue much earlier than ever before. We can use this revenue, even if minimal, to fund the development of additional features. We add value, then customers respond with more of their money. Another feedback loop.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challenge Questions for Business Leaders&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Does your process allow you to quickly and easily implement and test new features in the market?&lt;/li&gt;
&lt;li&gt;Can you quickly isolate which feature changes contribute to success and failure?&lt;/li&gt;
&lt;li&gt;How fast can you incorporate customer feedback into your next release?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;© 2015 Mark Richman. All Rights Reserved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Never Enough Time to Test</title>
      <link>http://www.markrichman.com:1313/never-enough-time-to-test/</link>
      <pubDate>Mon, 09 Nov 2015 16:27:39 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/never-enough-time-to-test/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;size-full wp-image-829 alignleft&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2015/11/not-enough-time-to-test.jpg&#34; alt=&#34;not-enough-time-to-test&#34; width=&#34;400&#34; height=&#34;312&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2015/11/not-enough-time-to-test-300x234.jpg 300w, http://www.markrichman.com/wp-content/uploads/2015/11/not-enough-time-to-test.jpg 400w&#34; sizes=&#34;(max-width: 400px) 100vw, 400px&#34; /&gt;I&amp;#8217;ve worked with dozens of organizations and teams making the transition to Agile &amp;#8211; specifically Scrum. The same issues constantly arise, almost always around testing. According to Scrum, a Product Backlog Item (PBI) is never &lt;strong&gt;done&lt;/strong&gt; until it is potentially shippable. That means code complete, tested, and documented, with a pretty bow on top&amp;#8230;it&amp;#8217;s not just done, it&amp;#8217;s &lt;strong&gt;done done&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Because we work in a timebox &amp;#8211; the Sprint &amp;#8211; we have a hard date from which to work backwards, usually two weeks. So this begs the question, while developers are coding away in the beginning of a sprint, what the heck are the testers doing? Sure, they can develop their test plans, but that isn&amp;#8217;t as time consuming as development, so I usually see testers relatively idle until developers start closing out tasks.&lt;/p&gt;

&lt;p&gt;This workflow creates a dilemma, where the sprint is inevitably end-loaded with testing work, leaving little time for rework and bug fixes. Often times, PBIs are incomplete at the end of a sprint, and they spill over into the next sprint for completion.&lt;/p&gt;

&lt;p&gt;One could suggest coding in one sprint, and then testing in the next, but this is effectively accelerated Waterfall, sometimes called Scrummerfall or Waterscrum. Whatever you call it, it&amp;#8217;s anti-Agile.&lt;/p&gt;

&lt;p&gt;Another remedy could be to extend the sprint from, say 2 weeks to 3. But that generally has the effect of &lt;a href=&#34;https://en.wikipedia.org/wiki/Parkinson%27s_law&#34; target=&#34;_blank&#34;&gt;Parkinson&amp;#8217;s Law&lt;/a&gt; on the sprint, where the work expands to fill the time allowed. You still end up with an end-loaded sprint; you just take longer to end up in the same place.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do we get testers testing sooner&lt;/strong&gt;, and prevent developers from rushing to get incomplete work in their hands?&lt;/p&gt;

&lt;p&gt;When refining the product backlog, we look for opportunities to decompose items. This helps create more fine-grained tasks, which in turn can be coded and tested with greater throughput. As these PBIs are selected for inclusion in a Sprint, we can enjoy a more fluid workflow.&lt;/p&gt;

&lt;p&gt;Challenge Questions for Business Leaders:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How effective is your team at maximizing their throughput and efficiency?&lt;/li&gt;
&lt;li&gt;How well does your team work under pressure to deliver on tight deadlines?&lt;/li&gt;
&lt;li&gt;How much happier would your customers be if given smaller feature enhancements, but much more often?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;© 2015 Mark Richman. All Rights Reserved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>We’ve Always Done it That Way (WADITW)</title>
      <link>http://www.markrichman.com:1313/weve-always-done-it-that-way-waditw/</link>
      <pubDate>Thu, 29 Oct 2015 19:42:53 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/weve-always-done-it-that-way-waditw/</guid>
      <description>&lt;p&gt;People hate change. We have our habits, routines, and preferences that drive us to act, or in many cases &lt;strong&gt;fail to act&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;size-medium wp-image-809 alignleft&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2015/10/habits-300x155.jpg&#34; alt=&#34;habits&#34; width=&#34;300&#34; height=&#34;155&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2015/10/habits-300x155.jpg 300w, http://www.markrichman.com/wp-content/uploads/2015/10/habits-1024x528.jpg 1024w, http://www.markrichman.com/wp-content/uploads/2015/10/habits.jpg 1445w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When I engage with a new client, I spend a lot of time not only understanding their business processes, but also the &lt;strong&gt;rationale&lt;/strong&gt; for those processes. It&amp;#8217;s my job to question and challenge these processes, with the goal of improving (or even removing) them to create new value for my clients.&lt;/p&gt;

&lt;p&gt;I am constantly surprised by really smart, educated clients who tell me &amp;#8220;we&amp;#8217;ve always done it that way,&amp;#8221; unable to explain the reasons why things are so. They have a belief that deviating from this norm will somehow cause loss or pain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Throw out the process manual&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve worked with Fortune 500 organizations that needed to innovate quickly. However, the regulatory and compliance climate of the past 15 years created processes and procedures that continued to drive organizational behavior. Traditional product development approaches took too long, and by the time the solution was delivered, it was either uncompetitive or obsolete.&lt;/p&gt;

&lt;p&gt;My most successful clients took a leap of faith and adopted agile or lean methods to quickly deliver new offerings to customers. Initially, they resisted this major change, comfortable in their &amp;#8220;we&amp;#8217;ve always done it that way&amp;#8221; approach.&lt;/p&gt;

&lt;p&gt;I can understand their hesitation. I had one client who &lt;strong&gt;actually preferred&lt;/strong&gt; a 100 page specification document, Gantt chart, work breakdown structure, fixed cost estimates, and a firm deadline. This approach offered the &lt;strong&gt;perception of a guaranteed budget, scope, and date&lt;/strong&gt;.  The budget, scope, and date of any project inevitably change. In over twenty years, I&amp;#8217;ve never had a project stick to all three.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I&amp;#8217;m not here to sell you a methodology&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Consultants love their methodologies. I don&amp;#8217;t have one to sell you because I don&amp;#8217;t believe in one-size-fits-all when it comes to my clients&amp;#8217; success. What I will offer you are these &lt;strong&gt;advantages&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Change&lt;/strong&gt; &amp;#8211; We accept the fact that scope will change over the life of a project. User feedback, external factors (competitors, regulations, etc.), and unforeseen complexity are givens. We avoid failure by delivering the system that is needed, as opposed to one designed in a vacuum.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Iteration&lt;/strong&gt; &amp;#8211; The ideal way to address change is to work in discrete steps towards an end state that we accept to be in flux. Details change. We gain new insights along the way. We inspect and adapt. Working this way avoids costly and time consuming requirements documents. My clients&amp;#8217; staff is energized by being able to work on something new &lt;strong&gt;early and often&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feedback&lt;/strong&gt; &amp;#8211; In order to identify and act upon change, we need frequent feedback. I coach most of my clients in Scrum (or some agile variant thereof), whose various &amp;#8220;ceremonies&amp;#8221; include a daily standup, sprint review, and retrospective. My clients welcome this approach, as changing insights, requirements, and risks are discovered regularly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Value&lt;/strong&gt; &amp;#8211; I help my clients achieve business value at the end of every iteration or sprint. We will have a potentially &lt;strong&gt;shippable product&lt;/strong&gt; every few weeks. This success engages customers and delights end users, where they can see the project has taken on life.&lt;/p&gt;

&lt;p&gt;Software development is an unpredictable process. I help my clients &lt;strong&gt;take the risk out of the chaos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Questions for Business Leaders:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How easily can you adapt to rapid change with your current process?&lt;/li&gt;
&lt;li&gt;Are your customers involved in your product development process, or do they only see the end result?&lt;/li&gt;
&lt;li&gt;Does your organization collaborate, or do they follow draconian processes?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;© 2015 Mark Richman. All rights reserved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Taking off from a Short Runway</title>
      <link>http://www.markrichman.com:1313/taking-off-from-a-short-runway/</link>
      <pubDate>Mon, 26 Oct 2015 13:54:35 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/taking-off-from-a-short-runway/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;alignleft wp-image-801&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2015/10/6a00d8341c630a53ef01630626d091970d-640wi.jpg&#34; alt=&#34;SANTA ANA, CA - NOVEMBER, 23, 2011: A U.S. Airways airplane flies over the 405 freeway as it approaches it&#39;s landing at John Wayne Airport in Orange County as travelers make their way to their destinations in time to celebrate Thanksgiving. ( Allen J. Schaben  / Los Angeles Times)&#34; width=&#34;477&#34; height=&#34;301&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2015/10/6a00d8341c630a53ef01630626d091970d-640wi-300x189.jpg 300w, http://www.markrichman.com/wp-content/uploads/2015/10/6a00d8341c630a53ef01630626d091970d-640wi-320x202.jpg 320w, http://www.markrichman.com/wp-content/uploads/2015/10/6a00d8341c630a53ef01630626d091970d-640wi.jpg 640w&#34; sizes=&#34;(max-width: 477px) 100vw, 477px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;John Wayne airport in Santa Ana, California has a rather unique set of takeoff requirements. Its runway, at 5,701 feet, is one of the shortest among commercial airports in the US. A Boeing 757 is the largest airplane that can be accommodated. It also has very strict noise requirements. My cousin lives next door in quiet Irvine, and told me that airplanes must take off at full throttle, shooting off the runway like a rocket, then quickly back down the engines to keep quiet.&lt;/p&gt;

&lt;p&gt;This made me think of some of the companies with whom I&amp;#8217;ve worked. Many were startups, either bootstrapping themselves or anemically funded with venture capital. Others were reasonably mature, but lacked sufficient capitalization to execute on their strategy effectively.&lt;/p&gt;

&lt;p&gt;A major issue with these types of companies is that they have lofty goals, but want everything under the sun in a short time frame. And their budgets are limited. The classical project management response to this situation is, &amp;#8220;you can have good, fast, and cheap. Pick two.&amp;#8221; &lt;strong&gt;I hate this answer&lt;/strong&gt;, and it reeks of in-the-box thinking.&lt;/p&gt;

&lt;p&gt;Agile software development works perfectly with short runways. You can get a high quality result in a short time frame. &lt;strong&gt;You can get the airplane off the ground before you run out of runway.&lt;/strong&gt; You just have to change your thinking a bit. Focus on what you &lt;strong&gt;need, &lt;/strong&gt;not what you &lt;strong&gt;want&lt;/strong&gt;. I&amp;#8217;ve found these are often not the same things.&lt;/p&gt;

&lt;p&gt;You will likely need some coaching to get comfortable with this approach. I help my clients evaluate their strategic goals and tactical objectives, formulating a launch plan that can get the proverbial plane off the ground with runway to spare.&lt;/p&gt;

&lt;p&gt;© 2015 by Mark Richman. All Rights Reserved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Success with Offshore Teams</title>
      <link>http://www.markrichman.com:1313/success-with-offshore-teams/</link>
      <pubDate>Tue, 25 Aug 2015 03:07:02 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/success-with-offshore-teams/</guid>
      <description>&lt;p&gt;While a steadily growing number of organizations have been moving their resources offshore, it still remains an involved, high-risk decision.&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400;&#34;&gt;Most companies consider moving at least some of their workload offshore for cost reduction and “follow the sun” coverage for support staff. I’ve worked with companies of all sizes to integrate offshore teams, and what I’ve found interesting is the common challenges they have. Most notably, they cite while labor costs are lower, product quality decreases, and projects take longer to complete. As a consequence, &lt;/span&gt;&lt;strong&gt;onshore rework&lt;/strong&gt; &lt;span style=&#34;font-weight: 400;&#34;&gt;to correct offshore defects erodes the cost savings offered by offshoring. Projects take longer to complete, deadlines are missed, and team morale suffers.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pride and Prejudice&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400;&#34;&gt;One client of mine, a publicly traded e-commerce company, engaged a team in India to handle bug fixes and some new development work. The team here in the US thumbed their noses at the idea, steadfast in their prejudice that “those people in India” lacked the skill to do the work. The onshore team viewed the offshore team as a threat to their jobs, and the onshore didn’t participate enthusiastically in the relationship.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400;&#34;&gt;I insisted that the offshore team was not there to steal their jobs, but rather to free them from less interesting work. The onshore team could then focus on higher value projects, where their expensive skills and institutional knowledge of the company could best be capitalized upon. In addition, &lt;/span&gt;&lt;strong&gt;core development&lt;/strong&gt; &lt;span style=&#34;font-weight: 400;&#34;&gt;was kept onshore, where at least one leader/senior developer was responsible. Without a control like this, it&amp;#8217;s impossible to know if the product you&amp;#8217;re receiving from offshore is of any quality.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Communication Complexity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400;&#34;&gt;This is the &lt;/span&gt;&lt;strong&gt;number one reason&lt;/strong&gt; &lt;span style=&#34;font-weight: 400;&#34;&gt;why offshoring will fail. With a team half a world and half a day away, there is little overlap in the teams’ work days in which to share information. Here is where a solid process, and the collaboration tools to enable it are most valuable.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400;&#34;&gt;Here are some tools and techniques that work for my clients:&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;li style=&#34;font-weight: 400;&#34;&gt;
  &lt;span style=&#34;font-weight: 400;&#34;&gt;Minimize dependencies between onshore and offshore resources. Your expensive onshore resources shouldn’t be blocked while waiting for offshore folks to complete tasks.&lt;/span&gt;
&lt;/li&gt;
&lt;li style=&#34;font-weight: 400;&#34;&gt;
  &lt;span style=&#34;font-weight: 400;&#34;&gt;Use great collaboration tools. Basecamp for less technical teams, YouTrack or JIRA for project and task management, Snagit or Jing for screen captures, Dropbox or OneDrive for file sharing, and so on. There are nearly limitless choices here.&lt;/span&gt;
&lt;/li&gt;
&lt;li style=&#34;font-weight: 400;&#34;&gt;
  &lt;span style=&#34;font-weight: 400;&#34;&gt;Treat your offshore resources as if they were local. Ensure they are always included in communications, meetings, or other relevant events. If you act as if they’re conscripted labor, then you will get exactly the kinds of behaviors back that you have induced—transactional, low-quality work with little documentation from a generally unmotivated workforce.&lt;/span&gt;
&lt;/li&gt;
&lt;li style=&#34;font-weight: 400;&#34;&gt;
  &lt;span style=&#34;font-weight: 400;&#34;&gt;Never let your onshore team refer to your offshore team as “them.” Seriously, it helps.&lt;/span&gt;
&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choose the right offshore partner&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400;&#34;&gt;When selecting an offshore vendor, seek a partner that understands and adheres to agile practices such as test-driven development and continuous integration testing. The remote team also needs to be managed locally. That is, they need they need a local leader that they report to. This further minimizes communication complexity.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get the right people on the bus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400;&#34;&gt;Product Managers at home must understand iterative and progressive development, minimal viable product, and how to prioritize a product backlogs. You want very short sprints (1-2 weeks long) and tight feedback loops. It&amp;#8217;s not about having someone offshore that never makes a single mistake, it&amp;#8217;s that the mistakes must be easily found and quickly fixed. And for that, you need practical use of Agile tools and techniques. &lt;/span&gt;&lt;strong&gt;Apply these same tactics both onshore and offshore.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-weight: 400;&#34;&gt;Success, not perfection, is an incremental process. If you stick to these basic assumptions, you should be able to work offshore with great results. &lt;/span&gt;&lt;span style=&#34;font-weight: 400;&#34;&gt;&lt;a href=&#34;http://www.markrichman.com&#34;&gt;Give me a call&lt;/a&gt;, and I can help you choose what’s best for your team.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;© 2015 Mark Richman. All Rights Reserved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>When Management Ignores the Process</title>
      <link>http://www.markrichman.com:1313/when-management-ignores-the-process/</link>
      <pubDate>Mon, 13 Jul 2015 14:52:45 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/when-management-ignores-the-process/</guid>
      <description>

&lt;p&gt;I was recently working with a consulting client who was suffering from a productivity decline in her organization over the past year. My client, a VP of a software development organization, recently adopted Scrum as its Agile software development process. When I conducted interviews with key team members, a common complaint emerged: “Management is always ignoring the process!”&lt;/p&gt;

&lt;p&gt;Most organizations follow some form of process, regardless of the domain. These processes range from lightweight (almost nonexistent) to the draconian. The amount of process varies wildly based on number of employees, clarity of roles and responsibilities, compliance requirements, degree of risk tolerance, and so on.&lt;/p&gt;

&lt;p&gt;What’s interesting is that management are usually the ones beating the “follow the process” drum, not the staff. My client was different.&lt;/p&gt;

&lt;h2 id=&#34;why-agile-is-different&#34;&gt;&lt;strong&gt;Why Agile is different&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Since adopting Scrum and Agile practices, my client’s team has come to rely on the safety net the process offers over traditional methodologies. Controlled iterative development, empiricism, and autonomy have all contributed to higher quality software at a faster pace, with dramatically reduced defects. &lt;strong&gt;And then suddenly, this all started falling apart.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A new CEO joined the organization, and with him came new priorities, new customers, and a focus on new revenue. Management, strangely less empowered than the teams they manage, followed the leader.&lt;/p&gt;

&lt;p&gt;The high velocity, high quality performance the team had been enjoying was disrupted by some unwelcome old symptoms from management. See if any of these situations resonate with you:&lt;/p&gt;

&lt;h2 id=&#34;out-of-band-high-priority-requests&#34;&gt;&lt;strong&gt;Out-of-band high-priority requests&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;One team member explained to me that their planned work (two weeks’ worth) had been hijacked to accommodate an executive’s pet project, with no explanation as to &lt;strong&gt;why&lt;/strong&gt; this work was important to the organization. Management followed orders and pushed this work down the line.&lt;/p&gt;

&lt;h2 id=&#34;when-everything-is-a-priority-then-nothing-is-a-priority&#34;&gt;&lt;strong&gt;When everything is a priority, then nothing is a priority&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Scrum, the process adopted by my client’s team, employs a prioritized Product Backlog to plan upcoming work, and a Sprint Backlog to plan work in progress. The goal is to constantly deliver maximum value to the organization, while maintaining quality.&lt;/p&gt;

&lt;p&gt;One manager began to nitpick certain subjective “spit and polish” issues, demanding the team to correct these while other &lt;strong&gt;prioritized&lt;/strong&gt; work was already underway. If the process were followed, these changes would be welcomed by the team, and given the attention they deserved. Instead, the team was distracted by the curveball, and failed to complete a key feature on time due to the distraction.&lt;/p&gt;

&lt;h2 id=&#34;priority-via-intimidation&#34;&gt;&lt;strong&gt;Priority via intimidation&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;While sometimes overt, intimidation by management can often be subtle. Managers who try to act as part of the team, often effectively, sometimes leverage their position in the org chart to influence priorities. One team member, a Product Owner, shared with me that her manager, while acting as part of the team in most instances, sometimes reverted to subtle “bullying” to get a feature prioritized. The problem here is that the Product Owner directly reported to the manager, a clear indication that the organizational relationships didn’t support the level of empowerment and autonomy needed.&lt;/p&gt;

&lt;h2 id=&#34;lack-of-mission-or-purpose&#34;&gt;&lt;strong&gt;Lack of mission or purpose&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Teams need a purpose in order to deliver effectively. Simply being told to “make widget X run faster” often isn’t sufficient to engage teams in a solution. Team members might ask “why I am working on this?” A better approach would be to frame the feature request in context: “We are losing $250,000 per year in productivity because widget X is slow.” Here, we can align the organizational objective with the technical solution.&lt;/p&gt;

&lt;h2 id=&#34;how-i-can-help&#34;&gt;&lt;strong&gt;How I can help&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;I worked with my client to bring these issues to light, much to her shock and dismay. We agreed that the organizational structure was not conducive to Agile software development. We instituted a number of changes to get back on track. First, the role of “manager” in the context of product development was deprecated. Instead, the Product Owner was empowered to make feature priority decisions, and in cases where conflict occurred with a manager, the Scrum Master served as arbiter. Next, the Scrum Master role was charged with the “check and balance” of ensuring that the Product Owner groomed only those Product Backlog items whose value was clear. I also encouraged skip-level meetings between my client (the VP) and individual team members, which can be used as a tool to bring to light any concerns the team might have, but have been previously uncomfortable raising.&lt;/p&gt;

&lt;h2 id=&#34;results&#34;&gt;&lt;strong&gt;Results&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;It’s been about six weeks since we made these changes. The realignment has been energizing to the team, as evidenced by unsolicited feedback from my client. While sliding back into old habits often happens, overall team productivity and morale are dramatically improved.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How is your process helping you?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;© Mark Richman 2015&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How agile are you? It really does matter.</title>
      <link>http://www.markrichman.com:1313/how-agile-are-you-it-really-does-matter/</link>
      <pubDate>Tue, 21 Oct 2014 12:11:45 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/how-agile-are-you-it-really-does-matter/</guid>
      <description>

&lt;p&gt;In 2010, Esther Derby &lt;a href=&#34;http://www.estherderby.com/2010/06/achieving-agility-means-to-an-end-or-end-in-itself-2.html&#34; target=&#34;_blank&#34;&gt;wrote&lt;/a&gt;, “How agile you are doesn’t matter. Whether you are 50 per cent agile, 90 per cent agile or agile through and through (what ever that means), doesn’t matter. What does matter is that your company is satisfying its customers, stakeholders, and employees.”&lt;/p&gt;

&lt;p&gt;While it’s critical to satisfy those groups in order to keep the lights on, you can’t reach the &lt;strong&gt;next level of performance&lt;/strong&gt; in your business by simply remaining afloat. How do we plot a course to peak levels of performance? How will we know when we’ve achieved it? First we must know where we are before we know where we’re headed.&lt;/p&gt;

&lt;p&gt;Since the 1980s, we have used tools such as the Capability Maturity Model (CMM) to formally measure and optimize business processes. As Agile development became more mainstream, the industry has sought to adopt a similar approach to measuring “agility.” Allow me to propose my own take on this approach.&lt;/p&gt;

&lt;p&gt;With Scrum as the most widely adopted Agile approach, we can look at not only its adoption rate across organizations, but also within a single organization. In addition to Scrum, we can observe other agile practices as well, such as test-driven development (TDD), continuous integration, etc. Within a single organization, I have identified six levels at which we can observe and measure Agile Maturity.&lt;/p&gt;

&lt;h2 id=&#34;level-0-8211-individual-agile-maturity&#34;&gt;Level 0 &amp;#8211; Individual Agile Maturity&lt;/h2&gt;

&lt;p&gt;This level is effectively an individual treading water to survive within chaos. There may be effective functional management, but it is often a command-and-control dictatorship. We often see little or no alignment between business units. We may also see extremes in process controls; either no controls at all (a free-for-all), or a draconian level of process which grinds productivity to a virtual halt. Individual and team morale is low.&lt;/p&gt;

&lt;p&gt;The agile individual survives by trying to create order, leveraging tools and techniques he can control with relative autonomy. For example, he utilizes test-driven development (TDD) to maximize the quality of his individual work.&lt;/p&gt;

&lt;h2 id=&#34;level-1-8211-team-agile-maturity&#34;&gt;Level 1 &amp;#8211; Team Agile Maturity&lt;/h2&gt;

&lt;p&gt;At this level, we see adoption of agile techniques, such as Scrum. While the team may not be completely fluent in the nuances of agile development, we see them working with some degree of autonomy. From a business perspective, there is no change from Level 0, as other teams are either unaware of the agile approach used by one another, or have yet to integrate with each other.&lt;/p&gt;

&lt;p&gt;The agile team is marginally more productive, due to the presence of a Scrum Master and Product Owner, who act as buffers, keeping developers focused, productive, and of higher morale.&lt;/p&gt;

&lt;h2 id=&#34;level-2-8211-cross-team-agile-maturity&#34;&gt;Level 2 &amp;#8211; Cross-Team Agile Maturity&lt;/h2&gt;

&lt;p&gt;Here we see agile practices, such as Scrum, Kanban, eXtreme Programming (XP), TDD and others used consistently within teams. We also see agile practices utilized across teams, such as a Scrum-of-Scrums, often with the assistance of an external agile coach.&lt;/p&gt;

&lt;p&gt;Productivity is measurably improved, but we may also see evidence of “storming” as some teams revert back to non-agile approaches. This often occurs when business owners and formal project management conflict with the adaptive nature of agile techniques. I call this the “failsafe vs. safefail phenomenon.”&lt;/p&gt;

&lt;h2 id=&#34;level-3-8211-business-unit-agile-maturity&#34;&gt;Level 3 &amp;#8211; Business Unit Agile Maturity&lt;/h2&gt;

&lt;p&gt;Business owners are now starting to integrate into the emerging cross-team agile culture. As the agile development teams begin to deliver more value, the business owners become more engaged and begin to evangelize the approach to their peers. We see agile teams moving from “storming” to “norming” as they are enjoying the benefits of agile, such as maximized productivity and morale.&lt;/p&gt;

&lt;h2 id=&#34;level-4-8211-project-management-agile-maturity&#34;&gt;Level 4 &amp;#8211; Project Management Agile Maturity&lt;/h2&gt;

&lt;p&gt;We often see Project Managers, along with functional managers, as the first roles which are threatened by the emergence of Agile within an organization. As the distinction between project manager and Scrum master becomes clearer, the interference with the development teams’ activities is minimized. The teams now enjoy nearly full autonomy. Larger and more ambitious projects are now trusted to be run with an Agile approach. The benefits of Agile are spreading outside of IT and the PMO.&lt;/p&gt;

&lt;h2 id=&#34;level-5-8211-enterprise-agile-maturity&#34;&gt;Level 5 &amp;#8211; Enterprise Agile Maturity&lt;/h2&gt;

&lt;p&gt;With level five performance, we see a fully aligned and autonomous set of teams and departments. Executives begin to avoid micromanaging teams and focus on strategic goals instead of tactics. We also see the emergence of Agile practices leveraged in non-IT projects.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;While maximizing value for customers, stakeholders, and employees is critical to business success, it’s just one spoke on a larger wheel. Let this article be your guide in helping you to answer this question for yourself: How agile are you? It really does matter.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Alignment vs. Autonomy</title>
      <link>http://www.markrichman.com:1313/alignment-vs-autonomy/</link>
      <pubDate>Sun, 12 Oct 2014 14:48:39 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/alignment-vs-autonomy/</guid>
      <description>&lt;p&gt;Alignment occurs when leaders and teams share the same values and work towards a common goal. Autonomy allows teams to work independently of leaders and each other. The stronger alignment we have, the more autonomy we can afford to grant. The leader’s job is to communicate what problem needs to be solved, and why. The team’s job is to collaborate with each other to find the best solution.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;aligncenter wp-image-586 size-large&#34; src=&#34;http://www.markrichman.com/wp-content/uploads/2014/10/Alignment-vs.-Autonomy-1024x890.png&#34; alt=&#34;Alignment vs. Autonomy&#34; width=&#34;669&#34; height=&#34;581&#34; srcset=&#34;http://www.markrichman.com/wp-content/uploads/2014/10/Alignment-vs.-Autonomy-300x261.png 300w, http://www.markrichman.com/wp-content/uploads/2014/10/Alignment-vs.-Autonomy-1024x890.png 1024w&#34; sizes=&#34;(max-width: 669px) 100vw, 669px&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why are You Failing at Agile and Scrum?</title>
      <link>http://www.markrichman.com:1313/why-are-you-failing-at-agile-and-scrum/</link>
      <pubDate>Sun, 28 Sep 2014 15:05:35 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/why-are-you-failing-at-agile-and-scrum/</guid>
      <description>

&lt;p&gt;What are the top ways in which organizations fail to adopt or fully implement Scrum and/or Agile?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;It is difficult to get a person to understand something, when their salary depends on not understanding it.&amp;#8221; &amp;#8211; Upton Sinclair&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, let’s address the question. Agile is not something that we can implement, it is a characteristic that we try to achieve. So, we do not “do agile”, we practice techniques that help us become agile; that give us the ability to move gracefully and help us become adaptable and resourceful. Given this goal, why is it so elusive for many individuals and organizations?&lt;/p&gt;

&lt;p&gt;Through my experience with clients and colleagues, I’ve distilled down several categories of individual and organizational dysfunction that leads to “fragile agile.” Ultimately, Agile and Scrum (which I use interchangeably in this article) are not about software; they are about people.&lt;/p&gt;

&lt;h2 id=&#34;work-with-an-experienced-agile-scrum-coach&#34;&gt;Work with an Experienced Agile/Scrum Coach&lt;/h2&gt;

&lt;p&gt;There can be tremendous trepidation for organizations dipping their toes in the Agile pool. Simply sending a few staff project managers to Scrum Master training is insufficient to foster the degree of change required to succeed. What’s needed are experienced coaches &amp;#8211; seasoned professionals who have not only facilitated such a transition successfully, but understand the growing pains and trouble spots described herein.&lt;/p&gt;

&lt;p&gt;In smaller organizations, a proper coach may be external out of necessity. This is a good time to engage an Agile/Scrum coach on a consulting basis to help get you started, or even back on track. For larger companies, you may have a coaching resource on staff to leverage.&lt;/p&gt;

&lt;h2 id=&#34;resistance-to-reorganization-is-dysfunctional&#34;&gt;Resistance to Reorganization is Dysfunctional&lt;/h2&gt;

&lt;p&gt;I once worked with an organization that wanted to “do Scrum” in order to accelerate delivery times. While this is a great reason to implement Scrum, there were some cultural and personality issues that stood in the way of success. At an executive level, there was little or no support for Scrum, not only due to skepticism of what was viewed as a “fad” methodology, but also an unwillingness to defer control to teams. This change in behavior would mean losing the “carrot and stick” with which the company was so used to using.&lt;/p&gt;

&lt;p&gt;Middle management was also fearful of the type of change that Scrum required. Would managers become obsolete with self-organizing teams? Loss of livelihood is certainly a valid reason to fear change. There were a few managers who were on board with the change, and chose to upgrade their skills. A couple became Scrum Masters, and others used the change as an opportunity to go back to hands-on technical work. Unfortunately, there were some managers and executives who still wanted status meetings, reports, and requirements artifacts up front.&lt;/p&gt;

&lt;p&gt;The development teams were, for the most part, very excited at the opportunity to embrace Scrum and move toward Agility. There is generally nothing more toxic to a developer’s productivity than meetings and other interruptions. Scrum was a way to make all that pain stop. However, the cure comes at a price &amp;#8211; &lt;strong&gt;transparency&lt;/strong&gt;. There were some development team members who prefered to hide behind a manager, and disliked the transparency into their daily activities that is required by Scrum. Sadly, a few folks quit, but that made room on the bus for new folks better suited for this type of work. &lt;strong&gt;Expect to lose people during this transition.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, I would classify this organization’s transition to Scrum as an abject failure. This was not a failure of Scrum; it was a failure of people. Nobody in the executive suite was willing to change their behavior. They simply wanted what they wanted, but faster. Not enough time? Work more. Not enough people? Work more. Can’t finish these features? Work more. Broken in production? Blame someone and fire them. &lt;strong&gt;Motivation through fear&lt;/strong&gt; is in opposition to the level of sustainable productivity required for any team to succeed over time.&lt;/p&gt;

&lt;p&gt;Scrum can’t cure personality disorders. &lt;strong&gt;The dysfunctional can’t become Agile.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;lack-of-empowerment&#34;&gt;Lack of Empowerment&lt;/h2&gt;

&lt;p&gt;Team empowerment is a fundamental precept of Scrum. A high-functioning agile organization will structure teams to manage and organize their work. After all, nobody knows better how the team works best but the team! With empowerment comes accountability. The team is in the driver’s seat, and management takes on a support role, removing obstacles for the team. As the team self-achieves, its sense of empowerment is strengthened.&lt;/p&gt;

&lt;p&gt;I recently worked with an organization that practices Agile and Scrum with several teams, each of which in various stages of maturity. The poorest functioning team had one obvious weakness &amp;#8211; the Product Owner. Her manager placed her in this position as a learning experience, presumably to improve her confidence and visibility in the organization &amp;#8211; a noble enough gesture. However, she had very little actual product knowledge, and the project was high risk with a tight deadline. As a result, she became little more than a proxy for her functional manager, and a pushover to stakeholders. Empowerment cuts both ways. Make sure you put the right people in the right seats, or the bus will go off the road.&lt;/p&gt;

&lt;h2 id=&#34;getting-back-on-track&#34;&gt;Getting Back on Track&lt;/h2&gt;

&lt;p&gt;Any event that provides an opportunity for inspection and adaptation can be considered a feedback loop. Unfortunately, many organizations fail to integrate critical feedback into its processes. Insodoing, they deny themselves increased levels of performance and flow.&lt;/p&gt;

&lt;p&gt;The four basic events providing feedback loops in Scrum are: Sprint Planning, Daily Scrum, Sprint Review, and Sprint Retrospective. I’ve found that the Sprint Retrospective provides some of the most valuable, yet hardest to implement feedback. Here, the onus is on the Scrum Master to not only effectively facilitate the meeting, but to remove impediments for the team. Often, these impediments are not removed, even after repeated retrospectives. &lt;strong&gt;Ensure that your Scrum Master is not hand-tied, or worse, incompetent.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A cardinal sin I see repeatedly committed by ineffective Scrum Masters is a struggle to “get back on track.” An off-track team can be evaluated both objectively and subjectively. The former is evidenced in various metrics such as velocity, burndown, and bug severity and frequency. The latter is more clearly evident through direct observation of the team. Is the daily scrum occurring? Is the team working on tasks outside of the sprint backlog? The Scrum Master is the coach. When the team is struggling, &lt;strong&gt;look to the coach, not the team.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Scrum Masters are not Project Managers. Often a novice Scrum Master will try to manage the team instead of leading, coaching, and guiding the team. A command-and-control management style is antithetical to Scrum and Agile Methods. Any Scrum Master who assigns tasks and dictates effort is not only breaking the rules of Scrum, but will also &lt;strong&gt;poison your team.&lt;/strong&gt; The best Scrum teams are self-organizing, with their Scrum Master functioning as a servant leader.&lt;/p&gt;

&lt;h2 id=&#34;selecting-the-wrong-pilot-project-and-people&#34;&gt;Selecting the Wrong Pilot Project (and People!)&lt;/h2&gt;

&lt;p&gt;Agile won’t meet everyone’s needs, and if it does, you won’t get it right immediately. So, minimize risk with a pilot project. Much of what drives success is enabling suspension of disbelief in what Scrum promises and the understanding that comes only in practice with an engaged team. Results drive perception and in turn perception drives results iteratively.&lt;/p&gt;

&lt;p&gt;When forming a new Scrum Team, I would suggest that if the team don&amp;#8217;t hand-pick themselves you need to &lt;strong&gt;sort out your hiring process&lt;/strong&gt; before you go much further. This is not only the first step in self-organization, but also in the level of corporate cultural change necessary for success.&lt;/p&gt;

&lt;p&gt;In new teams I repeatedly remind them to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inspect and adapt&lt;/li&gt;
&lt;li&gt;What is done cannot be changed, how one adapts is more important&lt;/li&gt;
&lt;li&gt;Scrum will highlight problems quickly&lt;/li&gt;
&lt;li&gt;It&amp;#8217;s hard to do Scrum well&lt;/li&gt;
&lt;li&gt;Failure should be seen as an opportunity to adapt&lt;/li&gt;
&lt;li&gt;We mitigate the impact of failure by timeboxing and frequent inspection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep in mind the stages of team formation as your pilot project proceeds. You can read up on Bruce Tuckman’s work on the subject, but the short version is that teams follow a predictable path on their way to high performance:&lt;/p&gt;

&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;strong&gt;Forming → Storming → Norming → Performing&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;When something goes &amp;#8220;wrong&amp;#8221; early on, you can safely blame storming. When a high-performing team stops performing, you have a bigger problem than storming. Look to external factors throughout the organization first.&lt;/p&gt;

&lt;p&gt;Notice I addressed the “people” part of the project before the actual project selected to pilot. Which project you select to pilot is far less critical than the team delivering its value. Whichever project you select, be sure that it’s difficult or presenting serious problems. This may seem counterintuitive and risky, but these are often the ideal projects in which the empirical nature of Scrum can quickly prove itself. Contrast this with a 12-month waterfall project, where failure is observed only at the end of the project, when all the time and money have been spent, and course corrections are impossible to make.&lt;/p&gt;

&lt;p&gt;Remember, Scrum provides a framework in which to “fail fast.” Don’t expect miracles after one or two sprints.&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;background-color: #ffff00; font-weight: bold;&#34;&gt;For Training, Coaching, and Consulting engagements, please &lt;a title=&#34;Contact&#34; href=&#34;http://www.markrichman.com/contact&#34;&gt;contact me&lt;/a&gt; for details on how I can help your organization.&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hyperproductive Distributed Scrum Teams</title>
      <link>http://www.markrichman.com:1313/hyperproductive-distributed-scrum-teams/</link>
      <pubDate>Mon, 11 Aug 2014 16:22:03 +0000</pubDate>
      
      <guid>http://www.markrichman.com:1313/hyperproductive-distributed-scrum-teams/</guid>
      <description>&lt;p&gt;Dr. Jeff Sutherland is one of the co-creators of the Scrum software development process. He and Ken Schwaber invented Scrum in 1993. Since then he has worked with many software companies and IT organizations to extend and enhance this process.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>